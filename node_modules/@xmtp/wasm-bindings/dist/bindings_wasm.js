import { JSArrayBufferCopy } from './snippets/wasm-array-cp-201e2a98f0e691f7/copy.min.js';

let wasm;

let WASM_VECTOR_LEN = 0;

let cachedUint8ArrayMemory0 = null;

function getUint8ArrayMemory0() {
    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8ArrayMemory0;
}

const cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length, 1) >>> 0;
        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len, 1) >>> 0;

    const mem = getUint8ArrayMemory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
        ptr = realloc(ptr, len, offset, 1) >>> 0;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

let cachedDataViewMemory0 = null;

function getDataViewMemory0() {
    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {
        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);
    }
    return cachedDataViewMemory0;
}

const cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );

if (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };

function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
}

function addToExternrefTable0(obj) {
    const idx = wasm.__externref_table_alloc();
    wasm.__wbindgen_export_4.set(idx, obj);
    return idx;
}

function handleError(f, args) {
    try {
        return f.apply(this, args);
    } catch (e) {
        const idx = addToExternrefTable0(e);
        wasm.__wbindgen_exn_store(idx);
    }
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

function getArrayU8FromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);
}

function getArrayJsValueFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    const mem = getDataViewMemory0();
    const result = [];
    for (let i = ptr; i < ptr + 4 * len; i += 4) {
        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));
    }
    wasm.__externref_drop_slice(ptr, len);
    return result;
}

const CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(state => {
    wasm.__wbindgen_export_7.get(state.dtor)(state.a, state.b)
});

function makeMutClosure(arg0, arg1, dtor, f) {
    const state = { a: arg0, b: arg1, cnt: 1, dtor };
    const real = (...args) => {
        // First up with a closure we increment the internal reference
        // count. This ensures that the Rust closure environment won't
        // be deallocated while we're invoking it.
        state.cnt++;
        const a = state.a;
        state.a = 0;
        try {
            return f(a, state.b, ...args);
        } finally {
            if (--state.cnt === 0) {
                wasm.__wbindgen_export_7.get(state.dtor)(a, state.b);
                CLOSURE_DTORS.unregister(state);
            } else {
                state.a = a;
            }
        }
    };
    real.original = state;
    CLOSURE_DTORS.register(real, state, state);
    return real;
}

function debugString(val) {
    // primitive types
    const type = typeof val;
    if (type == 'number' || type == 'boolean' || val == null) {
        return  `${val}`;
    }
    if (type == 'string') {
        return `"${val}"`;
    }
    if (type == 'symbol') {
        const description = val.description;
        if (description == null) {
            return 'Symbol';
        } else {
            return `Symbol(${description})`;
        }
    }
    if (type == 'function') {
        const name = val.name;
        if (typeof name == 'string' && name.length > 0) {
            return `Function(${name})`;
        } else {
            return 'Function';
        }
    }
    // objects
    if (Array.isArray(val)) {
        const length = val.length;
        let debug = '[';
        if (length > 0) {
            debug += debugString(val[0]);
        }
        for(let i = 1; i < length; i++) {
            debug += ', ' + debugString(val[i]);
        }
        debug += ']';
        return debug;
    }
    // Test for built-in
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches && builtInMatches.length > 1) {
        className = builtInMatches[1];
    } else {
        // Failed to match the standard '[object ClassName]'
        return toString.call(val);
    }
    if (className == 'Object') {
        // we're a user defined class or Object
        // JSON.stringify avoids problems with cycles, and is generally much
        // easier than looping through ownProperties of `val`.
        try {
            return 'Object(' + JSON.stringify(val) + ')';
        } catch (_) {
            return 'Object';
        }
    }
    // errors
    if (val instanceof Error) {
        return `${val.name}: ${val.message}\n${val.stack}`;
    }
    // TODO we could test for more things here, like `Set`s and `Map`s.
    return className;
}

function passArrayJsValueToWasm0(array, malloc) {
    const ptr = malloc(array.length * 4, 4) >>> 0;
    for (let i = 0; i < array.length; i++) {
        const add = addToExternrefTable0(array[i]);
        getDataViewMemory0().setUint32(ptr + 4 * i, add, true);
    }
    WASM_VECTOR_LEN = array.length;
    return ptr;
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
}

function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1, 1) >>> 0;
    getUint8ArrayMemory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}

function takeFromExternrefTable0(idx) {
    const value = wasm.__wbindgen_export_4.get(idx);
    wasm.__externref_table_dealloc(idx);
    return value;
}
/**
 * @param {string} host
 * @param {Identifier} accountIdentifier
 * @returns {Promise<string | undefined>}
 */
export function getInboxIdForIdentifier(host, accountIdentifier) {
    const ptr0 = passStringToWasm0(host, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ret = wasm.getInboxIdForIdentifier(ptr0, len0, accountIdentifier);
    return ret;
}

/**
 * @param {Identifier} accountIdentifier
 * @returns {string}
 */
export function generateInboxId(accountIdentifier) {
    let deferred2_0;
    let deferred2_1;
    try {
        const ret = wasm.generateInboxId(accountIdentifier);
        var ptr1 = ret[0];
        var len1 = ret[1];
        if (ret[3]) {
            ptr1 = 0; len1 = 0;
            throw takeFromExternrefTable0(ret[2]);
        }
        deferred2_0 = ptr1;
        deferred2_1 = len1;
        return getStringFromWasm0(ptr1, len1);
    } finally {
        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
    }
}

/**
 * @param {string} host
 * @param {string} inbox_id
 * @param {Identifier} account_identifier
 * @param {string | null} [db_path]
 * @param {Uint8Array | null} [encryption_key]
 * @param {string | null} [device_sync_server_url]
 * @param {DeviceSyncWorkerMode | null} [device_sync_worker_mode]
 * @param {LogOptions | null} [log_options]
 * @param {boolean | null} [allow_offline]
 * @param {boolean | null} [disable_events]
 * @param {string | null} [app_version]
 * @returns {Promise<Client>}
 */
export function createClient(host, inbox_id, account_identifier, db_path, encryption_key, device_sync_server_url, device_sync_worker_mode, log_options, allow_offline, disable_events, app_version) {
    const ptr0 = passStringToWasm0(host, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    var ptr2 = isLikeNone(db_path) ? 0 : passStringToWasm0(db_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len2 = WASM_VECTOR_LEN;
    var ptr3 = isLikeNone(device_sync_server_url) ? 0 : passStringToWasm0(device_sync_server_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len3 = WASM_VECTOR_LEN;
    let ptr4 = 0;
    if (!isLikeNone(log_options)) {
        _assertClass(log_options, LogOptions);
        ptr4 = log_options.__destroy_into_raw();
    }
    var ptr5 = isLikeNone(app_version) ? 0 : passStringToWasm0(app_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len5 = WASM_VECTOR_LEN;
    const ret = wasm.createClient(ptr0, len0, ptr1, len1, account_identifier, ptr2, len2, isLikeNone(encryption_key) ? 0 : addToExternrefTable0(encryption_key), ptr3, len3, isLikeNone(device_sync_worker_mode) ? 3 : ((__wbindgen_enum_DeviceSyncWorkerMode.indexOf(device_sync_worker_mode) + 1 || 3) - 1), ptr4, isLikeNone(allow_offline) ? 0xFFFFFF : allow_offline ? 1 : 0, isLikeNone(disable_events) ? 0xFFFFFF : disable_events ? 1 : 0, ptr5, len5);
    return ret;
}

/**
 * @param {MultiRemoteAttachment} multiRemoteAttachment
 * @returns {Uint8Array}
 */
export function encodeMultiRemoteAttachment(multiRemoteAttachment) {
    _assertClass(multiRemoteAttachment, MultiRemoteAttachment);
    var ptr0 = multiRemoteAttachment.__destroy_into_raw();
    const ret = wasm.encodeMultiRemoteAttachment(ptr0);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return takeFromExternrefTable0(ret[0]);
}

/**
 * @param {Uint8Array} bytes
 * @returns {MultiRemoteAttachment}
 */
export function decodeMultiRemoteAttachment(bytes) {
    const ret = wasm.decodeMultiRemoteAttachment(bytes);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return MultiRemoteAttachment.__wrap(ret[0]);
}

/**
 * @param {Reaction} reaction
 * @returns {Uint8Array}
 */
export function encodeReaction(reaction) {
    _assertClass(reaction, Reaction);
    var ptr0 = reaction.__destroy_into_raw();
    const ret = wasm.encodeReaction(ptr0);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return takeFromExternrefTable0(ret[0]);
}

/**
 * @param {Uint8Array} bytes
 * @returns {Reaction}
 */
export function decodeReaction(bytes) {
    const ret = wasm.decodeReaction(bytes);
    if (ret[2]) {
        throw takeFromExternrefTable0(ret[1]);
    }
    return Reaction.__wrap(ret[0]);
}

/**
 * @param {string} host
 * @param {string[]} inbox_ids
 * @returns {Promise<InboxState[]>}
 */
export function inboxStateFromInboxIds(host, inbox_ids) {
    const ptr0 = passStringToWasm0(host, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passArrayJsValueToWasm0(inbox_ids, wasm.__wbindgen_malloc);
    const len1 = WASM_VECTOR_LEN;
    const ret = wasm.inboxStateFromInboxIds(ptr0, len0, ptr1, len1);
    return ret;
}

/**
 * @param {string} signature_text
 * @param {Uint8Array} signature_bytes
 * @param {Uint8Array} public_key
 */
export function verifySignedWithPublicKey(signature_text, signature_bytes, public_key) {
    const ptr0 = passStringToWasm0(signature_text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ret = wasm.verifySignedWithPublicKey(ptr0, len0, signature_bytes, public_key);
    if (ret[1]) {
        throw takeFromExternrefTable0(ret[0]);
    }
}

/**
 * @param {string} host
 * @param {Identifier} recovery_identifier
 * @param {string} inbox_id
 * @param {Uint8Array[]} installation_ids
 * @returns {Promise<SignatureRequestHandle>}
 */
export function revokeInstallationsSignatureRequest(host, recovery_identifier, inbox_id, installation_ids) {
    const ptr0 = passStringToWasm0(host, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    const ptr2 = passArrayJsValueToWasm0(installation_ids, wasm.__wbindgen_malloc);
    const len2 = WASM_VECTOR_LEN;
    const ret = wasm.revokeInstallationsSignatureRequest(ptr0, len0, recovery_identifier, ptr1, len1, ptr2, len2);
    return ret;
}

/**
 * @param {string} host
 * @param {SignatureRequestHandle} signature_request
 * @returns {Promise<void>}
 */
export function applySignatureRequest(host, signature_request) {
    const ptr0 = passStringToWasm0(host, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    _assertClass(signature_request, SignatureRequestHandle);
    const ret = wasm.applySignatureRequest(ptr0, len0, signature_request.__wbg_ptr);
    return ret;
}

/**
 * Entry point invoked by JavaScript in a worker.
 * @param {number} ptr
 */
export function task_worker_entry_point(ptr) {
    const ret = wasm.task_worker_entry_point(ptr);
    if (ret[1]) {
        throw takeFromExternrefTable0(ret[0]);
    }
}

function __wbg_adapter_50(arg0, arg1) {
    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hc6b9ddcbfcc08eea(arg0, arg1);
}

function __wbg_adapter_53(arg0, arg1) {
    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hd0e40dce3ea5bca1(arg0, arg1);
}

function __wbg_adapter_56(arg0, arg1, arg2) {
    wasm.closure5204_externref_shim(arg0, arg1, arg2);
}

function __wbg_adapter_793(arg0, arg1, arg2, arg3) {
    wasm.closure6131_externref_shim(arg0, arg1, arg2, arg3);
}

/**
 * @enum {0 | 1}
 */
export const ConsentEntityType = Object.freeze({
    GroupId: 0, "0": "GroupId",
    InboxId: 1, "1": "InboxId",
});
/**
 * @enum {0 | 1 | 2}
 */
export const ConsentState = Object.freeze({
    Unknown: 0, "0": "Unknown",
    Allowed: 1, "1": "Allowed",
    Denied: 2, "2": "Denied",
});
/**
 * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9}
 */
export const ContentType = Object.freeze({
    Unknown: 0, "0": "Unknown",
    Text: 1, "1": "Text",
    GroupMembershipChange: 2, "2": "GroupMembershipChange",
    GroupUpdated: 3, "3": "GroupUpdated",
    Reaction: 4, "4": "Reaction",
    ReadReceipt: 5, "5": "ReadReceipt",
    Reply: 6, "6": "Reply",
    Attachment: 7, "7": "Attachment",
    RemoteAttachment: 8, "8": "RemoteAttachment",
    TransactionReference: 9, "9": "TransactionReference",
});
/**
 * @enum {0 | 1 | 2}
 */
export const ConversationType = Object.freeze({
    Dm: 0, "0": "Dm",
    Group: 1, "1": "Group",
    Sync: 2, "2": "Sync",
});
/**
 * @enum {0 | 1 | 2}
 */
export const DeliveryStatus = Object.freeze({
    Unpublished: 0, "0": "Unpublished",
    Published: 1, "1": "Published",
    Failed: 2, "2": "Failed",
});
/**
 * @enum {0 | 1 | 2 | 3}
 */
export const GroupMembershipState = Object.freeze({
    Allowed: 0, "0": "Allowed",
    Rejected: 1, "1": "Rejected",
    Pending: 2, "2": "Pending",
    Restored: 3, "3": "Restored",
});
/**
 * @enum {0 | 1}
 */
export const GroupMessageKind = Object.freeze({
    Application: 0, "0": "Application",
    MembershipChange: 1, "1": "MembershipChange",
});
/**
 * @enum {0 | 1 | 2}
 */
export const GroupPermissionsOptions = Object.freeze({
    Default: 0, "0": "Default",
    AdminOnly: 1, "1": "AdminOnly",
    CustomPolicy: 2, "2": "CustomPolicy",
});
/**
 * @enum {0 | 1 | 2 | 3 | 4}
 */
export const MetadataField = Object.freeze({
    GroupName: 0, "0": "GroupName",
    Description: 1, "1": "Description",
    ImageUrlSquare: 2, "2": "ImageUrlSquare",
    MessageExpirationFromMS: 3, "3": "MessageExpirationFromMS",
    MessageExpirationMS: 4, "4": "MessageExpirationMS",
});
/**
 * @enum {0 | 1 | 2}
 */
export const PermissionLevel = Object.freeze({
    Member: 0, "0": "Member",
    Admin: 1, "1": "Admin",
    SuperAdmin: 2, "2": "SuperAdmin",
});
/**
 * @enum {0 | 1 | 2 | 3 | 4 | 5}
 */
export const PermissionPolicy = Object.freeze({
    Allow: 0, "0": "Allow",
    Deny: 1, "1": "Deny",
    Admin: 2, "2": "Admin",
    SuperAdmin: 3, "3": "SuperAdmin",
    DoesNotExist: 4, "4": "DoesNotExist",
    Other: 5, "5": "Other",
});
/**
 * @enum {0 | 1 | 2 | 3 | 4}
 */
export const PermissionUpdateType = Object.freeze({
    AddMember: 0, "0": "AddMember",
    RemoveMember: 1, "1": "RemoveMember",
    AddAdmin: 2, "2": "AddAdmin",
    RemoveAdmin: 3, "3": "RemoveAdmin",
    UpdateMetadata: 4, "4": "UpdateMetadata",
});
/**
 * @enum {0 | 1 | 2}
 */
export const ReactionAction = Object.freeze({
    Unknown: 0, "0": "Unknown",
    Added: 1, "1": "Added",
    Removed: 2, "2": "Removed",
});
/**
 * @enum {0 | 1 | 2 | 3}
 */
export const ReactionSchema = Object.freeze({
    Unknown: 0, "0": "Unknown",
    Unicode: 1, "1": "Unicode",
    Shortcode: 2, "2": "Shortcode",
    Custom: 3, "3": "Custom",
});
/**
 * @enum {0 | 1}
 */
export const SortDirection = Object.freeze({
    Ascending: 0, "0": "Ascending",
    Descending: 1, "1": "Descending",
});

const __wbindgen_enum_DeviceSyncWorkerMode = ["enabled", "disabled"];

const __wbindgen_enum_LogLevel = ["off", "error", "warn", "info", "debug", "trace"];

const __wbindgen_enum_ReadableStreamType = ["bytes"];

const __wbindgen_enum_RequestCache = ["default", "no-store", "reload", "no-cache", "force-cache", "only-if-cached"];

const __wbindgen_enum_RequestCredentials = ["omit", "same-origin", "include"];

const __wbindgen_enum_RequestMode = ["same-origin", "no-cors", "cors", "navigate"];

const ApiStatsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_apistats_free(ptr >>> 0, 1));

export class ApiStats {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ApiStats.prototype);
        obj.__wbg_ptr = ptr;
        ApiStatsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ApiStatsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_apistats_free(ptr, 0);
    }
    /**
     * @returns {bigint}
     */
    get upload_key_package() {
        const ret = wasm.__wbg_get_apistats_upload_key_package(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set upload_key_package(arg0) {
        wasm.__wbg_set_apistats_upload_key_package(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get fetch_key_package() {
        const ret = wasm.__wbg_get_apistats_fetch_key_package(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set fetch_key_package(arg0) {
        wasm.__wbg_set_apistats_fetch_key_package(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get send_group_messages() {
        const ret = wasm.__wbg_get_apistats_send_group_messages(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set send_group_messages(arg0) {
        wasm.__wbg_set_apistats_send_group_messages(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get send_welcome_messages() {
        const ret = wasm.__wbg_get_apistats_send_welcome_messages(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set send_welcome_messages(arg0) {
        wasm.__wbg_set_apistats_send_welcome_messages(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get query_group_messages() {
        const ret = wasm.__wbg_get_apistats_query_group_messages(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set query_group_messages(arg0) {
        wasm.__wbg_set_apistats_query_group_messages(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get query_welcome_messages() {
        const ret = wasm.__wbg_get_apistats_query_welcome_messages(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set query_welcome_messages(arg0) {
        wasm.__wbg_set_apistats_query_welcome_messages(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get subscribe_messages() {
        const ret = wasm.__wbg_get_apistats_subscribe_messages(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set subscribe_messages(arg0) {
        wasm.__wbg_set_apistats_subscribe_messages(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get subscribe_welcomes() {
        const ret = wasm.__wbg_get_apistats_subscribe_welcomes(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set subscribe_welcomes(arg0) {
        wasm.__wbg_set_apistats_subscribe_welcomes(this.__wbg_ptr, arg0);
    }
}

const ClientFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_client_free(ptr >>> 0, 1));

export class Client {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Client.prototype);
        obj.__wbg_ptr = ptr;
        ClientFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ClientFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_client_free(ptr, 0);
    }
    /**
     * @returns {Identifier}
     */
    get accountIdentifier() {
        const ret = wasm.client_accountIdentifier(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {string}
     */
    get inboxId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.client_inboxId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {boolean}
     */
    get isRegistered() {
        const ret = wasm.client_isRegistered(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * @returns {string}
     */
    get installationId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.client_installationId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {Uint8Array}
     */
    get installationIdBytes() {
        const ret = wasm.client_installationIdBytes(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {string}
     */
    get appVersion() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.client_appVersion(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {string}
     */
    get libxmtpVersion() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.client_libxmtpVersion(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * Output booleans should be zipped with the index of input identifiers
     * @param {Identifier[]} account_identifiers
     * @returns {Promise<any>}
     */
    canMessage(account_identifiers) {
        const ptr0 = passArrayJsValueToWasm0(account_identifiers, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.client_canMessage(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @returns {Promise<void>}
     */
    sendSyncRequest() {
        const ret = wasm.client_sendSyncRequest(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Identifier} identifier
     * @returns {Promise<string | undefined>}
     */
    findInboxIdByIdentifier(identifier) {
        const ret = wasm.client_findInboxIdByIdentifier(this.__wbg_ptr, identifier);
        return ret;
    }
    /**
     * @param {string[]} inbox_ids
     * @param {boolean} refresh_from_network
     * @returns {Promise<InboxState[]>}
     */
    inboxStateFromInboxIds(inbox_ids, refresh_from_network) {
        const ptr0 = passArrayJsValueToWasm0(inbox_ids, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.client_inboxStateFromInboxIds(this.__wbg_ptr, ptr0, len0, refresh_from_network);
        return ret;
    }
    /**
     * @returns {Conversations}
     */
    conversations() {
        const ret = wasm.client_conversations(this.__wbg_ptr);
        return Conversations.__wrap(ret);
    }
    /**
     * @returns {Promise<number>}
     */
    syncPreferences() {
        const ret = wasm.client_syncPreferences(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {ApiStats}
     */
    apiStatistics() {
        const ret = wasm.client_apiStatistics(this.__wbg_ptr);
        return ApiStats.__wrap(ret);
    }
    /**
     * @returns {IdentityStats}
     */
    apiIdentityStatistics() {
        const ret = wasm.client_apiIdentityStatistics(this.__wbg_ptr);
        return IdentityStats.__wrap(ret);
    }
    /**
     * @returns {string}
     */
    apiAggregateStatistics() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.client_apiAggregateStatistics(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    clearAllStatistics() {
        wasm.client_clearAllStatistics(this.__wbg_ptr);
    }
    /**
     * @param {string} server_url
     * @returns {Promise<string>}
     */
    uploadDebugArchive(server_url) {
        const ptr0 = passStringToWasm0(server_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.client_uploadDebugArchive(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {Consent[]} records
     * @returns {Promise<void>}
     */
    setConsentStates(records) {
        const ptr0 = passArrayJsValueToWasm0(records, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.client_setConsentStates(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {ConsentEntityType} entity_type
     * @param {string} entity
     * @returns {Promise<ConsentState>}
     */
    getConsentState(entity_type, entity) {
        const ptr0 = passStringToWasm0(entity, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.client_getConsentState(this.__wbg_ptr, entity_type, ptr0, len0);
        return ret;
    }
    /**
     *
     *   * Get the client's inbox state.
     *   *
     *   * If `refresh_from_network` is true, the client will go to the network first to refresh the state.
     *   * Otherwise, the state will be read from the local database.
     *
     * @param {boolean} refresh_from_network
     * @returns {Promise<InboxState>}
     */
    inboxState(refresh_from_network) {
        const ret = wasm.client_inboxState(this.__wbg_ptr, refresh_from_network);
        return ret;
    }
    /**
     * @param {string} inbox_id
     * @returns {Promise<InboxState>}
     */
    getLatestInboxState(inbox_id) {
        const ptr0 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.client_getLatestInboxState(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     *
     *   * Get key package statuses for a list of installation IDs.
     *   *
     *   * Returns a JavaScript object mapping installation ID strings to KeyPackageStatus objects.
     *
     * @param {string[]} installation_ids
     * @returns {Promise<any>}
     */
    getKeyPackageStatusesForInstallationIds(installation_ids) {
        const ptr0 = passArrayJsValueToWasm0(installation_ids, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.client_getKeyPackageStatusesForInstallationIds(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @returns {SignatureRequestHandle | undefined}
     */
    createInboxSignatureRequest() {
        const ret = wasm.client_createInboxSignatureRequest(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : SignatureRequestHandle.__wrap(ret[0]);
    }
    /**
     * @param {Identifier} new_identifier
     * @returns {Promise<SignatureRequestHandle>}
     */
    addWalletSignatureRequest(new_identifier) {
        const ret = wasm.client_addWalletSignatureRequest(this.__wbg_ptr, new_identifier);
        return ret;
    }
    /**
     * @param {Identifier} identifier
     * @returns {Promise<SignatureRequestHandle>}
     */
    revokeWalletSignatureRequest(identifier) {
        const ret = wasm.client_revokeWalletSignatureRequest(this.__wbg_ptr, identifier);
        return ret;
    }
    /**
     * @returns {Promise<SignatureRequestHandle>}
     */
    revokeAllOtherInstallationsSignatureRequest() {
        const ret = wasm.client_revokeAllOtherInstallationsSignatureRequest(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Uint8Array[]} installation_ids
     * @returns {Promise<SignatureRequestHandle>}
     */
    revokeInstallationsSignatureRequest(installation_ids) {
        const ptr0 = passArrayJsValueToWasm0(installation_ids, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.client_revokeInstallationsSignatureRequest(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {Identifier} new_recovery_identifier
     * @returns {Promise<SignatureRequestHandle>}
     */
    changeRecoveryIdentifierSignatureRequest(new_recovery_identifier) {
        const ret = wasm.client_changeRecoveryIdentifierSignatureRequest(this.__wbg_ptr, new_recovery_identifier);
        return ret;
    }
    /**
     * @param {SignatureRequestHandle} signature_request
     * @returns {Promise<void>}
     */
    applySignatureRequest(signature_request) {
        _assertClass(signature_request, SignatureRequestHandle);
        const ret = wasm.client_applySignatureRequest(this.__wbg_ptr, signature_request.__wbg_ptr);
        return ret;
    }
    /**
     * @param {SignatureRequestHandle} signature_request
     * @returns {Promise<void>}
     */
    registerIdentity(signature_request) {
        _assertClass(signature_request, SignatureRequestHandle);
        var ptr0 = signature_request.__destroy_into_raw();
        const ret = wasm.client_registerIdentity(this.__wbg_ptr, ptr0);
        return ret;
    }
    /**
     * @param {string} signature_text
     * @returns {Uint8Array}
     */
    signWithInstallationKey(signature_text) {
        const ptr0 = passStringToWasm0(signature_text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.client_signWithInstallationKey(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @param {string} signature_text
     * @param {Uint8Array} signature_bytes
     */
    verifySignedWithInstallationKey(signature_text, signature_bytes) {
        const ptr0 = passStringToWasm0(signature_text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.client_verifySignedWithInstallationKey(this.__wbg_ptr, ptr0, len0, signature_bytes);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
}

const ConsentFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_consent_free(ptr >>> 0, 1));

export class Consent {

    static __unwrap(jsValue) {
        if (!(jsValue instanceof Consent)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ConsentFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_consent_free(ptr, 0);
    }
    /**
     * @returns {ConsentEntityType}
     */
    get entityType() {
        const ret = wasm.__wbg_get_consent_entityType(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {ConsentEntityType} arg0
     */
    set entityType(arg0) {
        wasm.__wbg_set_consent_entityType(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {ConsentState}
     */
    get state() {
        const ret = wasm.__wbg_get_consent_state(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {ConsentState} arg0
     */
    set state(arg0) {
        wasm.__wbg_set_consent_state(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {string}
     */
    get entity() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_consent_entity(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set entity(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_consent_entity(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @param {ConsentEntityType} entity_type
     * @param {ConsentState} state
     * @param {string} entity
     */
    constructor(entity_type, state, entity) {
        const ptr0 = passStringToWasm0(entity, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.consent_new(entity_type, state, ptr0, len0);
        this.__wbg_ptr = ret >>> 0;
        ConsentFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const ContentTypeIdFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_contenttypeid_free(ptr >>> 0, 1));

export class ContentTypeId {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ContentTypeId.prototype);
        obj.__wbg_ptr = ptr;
        ContentTypeIdFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ContentTypeIdFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_contenttypeid_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    get authorityId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_contenttypeid_authorityId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set authorityId(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_consent_entity(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {string}
     */
    get typeId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_contenttypeid_typeId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set typeId(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_contenttypeid_typeId(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {number}
     */
    get versionMajor() {
        const ret = wasm.__wbg_get_contenttypeid_versionMajor(this.__wbg_ptr);
        return ret >>> 0;
    }
    /**
     * @param {number} arg0
     */
    set versionMajor(arg0) {
        wasm.__wbg_set_contenttypeid_versionMajor(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {number}
     */
    get versionMinor() {
        const ret = wasm.__wbg_get_contenttypeid_versionMinor(this.__wbg_ptr);
        return ret >>> 0;
    }
    /**
     * @param {number} arg0
     */
    set versionMinor(arg0) {
        wasm.__wbg_set_contenttypeid_versionMinor(this.__wbg_ptr, arg0);
    }
    /**
     * @param {string} authority_id
     * @param {string} type_id
     * @param {number} version_major
     * @param {number} version_minor
     */
    constructor(authority_id, type_id, version_major, version_minor) {
        const ptr0 = passStringToWasm0(authority_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(type_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.contenttypeid_new(ptr0, len0, ptr1, len1, version_major, version_minor);
        this.__wbg_ptr = ret >>> 0;
        ContentTypeIdFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const ConversationFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_conversation_free(ptr >>> 0, 1));

export class Conversation {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Conversation.prototype);
        obj.__wbg_ptr = ptr;
        ConversationFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ConversationFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_conversation_free(ptr, 0);
    }
    /**
     * @returns {ConsentState}
     */
    consentState() {
        const ret = wasm.conversation_consentState(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0];
    }
    /**
     * @param {ConsentState} state
     */
    updateConsentState(state) {
        const ret = wasm.conversation_updateConsentState(this.__wbg_ptr, state);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * @returns {string}
     */
    id() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.conversation_id(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {EncodedContent} encoded_content
     * @returns {Promise<string>}
     */
    send(encoded_content) {
        _assertClass(encoded_content, EncodedContent);
        var ptr0 = encoded_content.__destroy_into_raw();
        const ret = wasm.conversation_send(this.__wbg_ptr, ptr0);
        return ret;
    }
    /**
     * send a message without immediately publishing to the delivery service.
     * @param {EncodedContent} encoded_content
     * @returns {string}
     */
    sendOptimistic(encoded_content) {
        let deferred3_0;
        let deferred3_1;
        try {
            _assertClass(encoded_content, EncodedContent);
            var ptr0 = encoded_content.__destroy_into_raw();
            const ret = wasm.conversation_sendOptimistic(this.__wbg_ptr, ptr0);
            var ptr2 = ret[0];
            var len2 = ret[1];
            if (ret[3]) {
                ptr2 = 0; len2 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred3_0 = ptr2;
            deferred3_1 = len2;
            return getStringFromWasm0(ptr2, len2);
        } finally {
            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);
        }
    }
    /**
     * Publish all unpublished messages
     * @returns {Promise<void>}
     */
    publishMessages() {
        const ret = wasm.conversation_publishMessages(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Promise<void>}
     */
    sync() {
        const ret = wasm.conversation_sync(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {ListMessagesOptions | null} [opts]
     * @returns {Promise<Message[]>}
     */
    findMessages(opts) {
        let ptr0 = 0;
        if (!isLikeNone(opts)) {
            _assertClass(opts, ListMessagesOptions);
            ptr0 = opts.__destroy_into_raw();
        }
        const ret = wasm.conversation_findMessages(this.__wbg_ptr, ptr0);
        return ret;
    }
    /**
     * @param {ListMessagesOptions | null} [opts]
     * @returns {Promise<MessageWithReactions[]>}
     */
    findMessagesWithReactions(opts) {
        let ptr0 = 0;
        if (!isLikeNone(opts)) {
            _assertClass(opts, ListMessagesOptions);
            ptr0 = opts.__destroy_into_raw();
        }
        const ret = wasm.conversation_findMessagesWithReactions(this.__wbg_ptr, ptr0);
        return ret;
    }
    /**
     * @returns {Promise<any>}
     */
    listMembers() {
        const ret = wasm.conversation_listMembers(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {string[]}
     */
    adminList() {
        const ret = wasm.conversation_adminList(this.__wbg_ptr);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @returns {string[]}
     */
    superAdminList() {
        const ret = wasm.conversation_superAdminList(this.__wbg_ptr);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {string} inbox_id
     * @returns {boolean}
     */
    isAdmin(inbox_id) {
        const ptr0 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_isAdmin(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * @param {string} inbox_id
     * @returns {boolean}
     */
    isSuperAdmin(inbox_id) {
        const ptr0 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_isSuperAdmin(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * @param {Identifier[]} account_identifiers
     * @returns {Promise<void>}
     */
    addMembers(account_identifiers) {
        const ptr0 = passArrayJsValueToWasm0(account_identifiers, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_addMembers(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {string} inbox_id
     * @returns {Promise<void>}
     */
    addAdmin(inbox_id) {
        const ptr0 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_addAdmin(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {string} inbox_id
     * @returns {Promise<void>}
     */
    removeAdmin(inbox_id) {
        const ptr0 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_removeAdmin(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {string} inbox_id
     * @returns {Promise<void>}
     */
    addSuperAdmin(inbox_id) {
        const ptr0 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_addSuperAdmin(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {string} inbox_id
     * @returns {Promise<void>}
     */
    removeSuperAdmin(inbox_id) {
        const ptr0 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_removeSuperAdmin(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @returns {GroupPermissions}
     */
    groupPermissions() {
        const ret = wasm.conversation_groupPermissions(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return GroupPermissions.__wrap(ret[0]);
    }
    /**
     * @param {string[]} inbox_ids
     * @returns {Promise<void>}
     */
    addMembersByInboxId(inbox_ids) {
        const ptr0 = passArrayJsValueToWasm0(inbox_ids, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_addMembersByInboxId(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {Identifier[]} account_identifiers
     * @returns {Promise<void>}
     */
    removeMembers(account_identifiers) {
        const ptr0 = passArrayJsValueToWasm0(account_identifiers, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_removeMembers(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {string[]} inbox_ids
     * @returns {Promise<void>}
     */
    removeMembersByInboxId(inbox_ids) {
        const ptr0 = passArrayJsValueToWasm0(inbox_ids, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_removeMembersByInboxId(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {string} group_name
     * @returns {Promise<void>}
     */
    updateGroupName(group_name) {
        const ptr0 = passStringToWasm0(group_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_updateGroupName(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @returns {string}
     */
    groupName() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.conversation_groupName(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @param {string} group_image_url_square
     * @returns {Promise<void>}
     */
    updateGroupImageUrlSquare(group_image_url_square) {
        const ptr0 = passStringToWasm0(group_image_url_square, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_updateGroupImageUrlSquare(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @returns {string}
     */
    groupImageUrlSquare() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.conversation_groupImageUrlSquare(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @param {string} group_description
     * @returns {Promise<void>}
     */
    updateGroupDescription(group_description) {
        const ptr0 = passStringToWasm0(group_description, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversation_updateGroupDescription(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @returns {string}
     */
    groupDescription() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.conversation_groupDescription(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @param {any} callback
     * @returns {StreamCloser}
     */
    stream(callback) {
        const ret = wasm.conversation_stream(this.__wbg_ptr, callback);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StreamCloser.__wrap(ret[0]);
    }
    /**
     * @returns {bigint}
     */
    createdAtNs() {
        const ret = wasm.conversation_createdAtNs(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {boolean}
     */
    isActive() {
        const ret = wasm.conversation_isActive(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * @returns {string | undefined}
     */
    pausedForVersion() {
        const ret = wasm.conversation_pausedForVersion(this.__wbg_ptr);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @returns {string}
     */
    addedByInboxId() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.conversation_addedByInboxId(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @returns {Promise<GroupMetadata>}
     */
    groupMetadata() {
        const ret = wasm.conversation_groupMetadata(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {string}
     */
    dmPeerInboxId() {
        let deferred2_0;
        let deferred2_1;
        try {
            const ret = wasm.conversation_dmPeerInboxId(this.__wbg_ptr);
            var ptr1 = ret[0];
            var len1 = ret[1];
            if (ret[3]) {
                ptr1 = 0; len1 = 0;
                throw takeFromExternrefTable0(ret[2]);
            }
            deferred2_0 = ptr1;
            deferred2_1 = len1;
            return getStringFromWasm0(ptr1, len1);
        } finally {
            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);
        }
    }
    /**
     * @param {PermissionUpdateType} permission_update_type
     * @param {PermissionPolicy} permission_policy_option
     * @param {MetadataField | null} [metadata_field]
     * @returns {Promise<void>}
     */
    updatePermissionPolicy(permission_update_type, permission_policy_option, metadata_field) {
        const ret = wasm.conversation_updatePermissionPolicy(this.__wbg_ptr, permission_update_type, permission_policy_option, isLikeNone(metadata_field) ? 5 : metadata_field);
        return ret;
    }
    /**
     * @param {MessageDisappearingSettings} settings
     * @returns {Promise<void>}
     */
    updateMessageDisappearingSettings(settings) {
        _assertClass(settings, MessageDisappearingSettings);
        var ptr0 = settings.__destroy_into_raw();
        const ret = wasm.conversation_updateMessageDisappearingSettings(this.__wbg_ptr, ptr0);
        return ret;
    }
    /**
     * @returns {Promise<void>}
     */
    removeMessageDisappearingSettings() {
        const ret = wasm.conversation_removeMessageDisappearingSettings(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {MessageDisappearingSettings | undefined}
     */
    messageDisappearingSettings() {
        const ret = wasm.conversation_messageDisappearingSettings(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] === 0 ? undefined : MessageDisappearingSettings.__wrap(ret[0]);
    }
    /**
     * @returns {boolean}
     */
    isMessageDisappearingEnabled() {
        const ret = wasm.conversation_isMessageDisappearingEnabled(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * @returns {any}
     */
    getHmacKeys() {
        const ret = wasm.conversation_getHmacKeys(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @returns {Promise<any>}
     */
    getDebugInfo() {
        const ret = wasm.conversation_getDebugInfo(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Promise<Conversation[]>}
     */
    findDuplicateDms() {
        const ret = wasm.conversation_findDuplicateDms(this.__wbg_ptr);
        return ret;
    }
}

const ConversationDebugInfoFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_conversationdebuginfo_free(ptr >>> 0, 1));

export class ConversationDebugInfo {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ConversationDebugInfoFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_conversationdebuginfo_free(ptr, 0);
    }
    /**
     * @returns {bigint}
     */
    get epoch() {
        const ret = wasm.__wbg_get_conversationdebuginfo_epoch(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set epoch(arg0) {
        wasm.__wbg_set_conversationdebuginfo_epoch(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {boolean}
     */
    get maybeForked() {
        const ret = wasm.__wbg_get_conversationdebuginfo_maybeForked(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * @param {boolean} arg0
     */
    set maybeForked(arg0) {
        wasm.__wbg_set_conversationdebuginfo_maybeForked(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {string}
     */
    get forkDetails() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_conversationdebuginfo_forkDetails(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set forkDetails(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_conversationdebuginfo_forkDetails(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {boolean | undefined}
     */
    get isCommitLogForked() {
        const ret = wasm.__wbg_get_conversationdebuginfo_isCommitLogForked(this.__wbg_ptr);
        return ret === 0xFFFFFF ? undefined : ret !== 0;
    }
    /**
     * @param {boolean | null} [arg0]
     */
    set isCommitLogForked(arg0) {
        wasm.__wbg_set_conversationdebuginfo_isCommitLogForked(this.__wbg_ptr, isLikeNone(arg0) ? 0xFFFFFF : arg0 ? 1 : 0);
    }
    /**
     * @returns {string}
     */
    get localCommitLog() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_conversationdebuginfo_localCommitLog(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set localCommitLog(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_conversationdebuginfo_localCommitLog(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {string}
     */
    get remoteCommitLog() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_conversationdebuginfo_remoteCommitLog(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set remoteCommitLog(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_conversationdebuginfo_remoteCommitLog(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {bigint}
     */
    get cursor() {
        const ret = wasm.__wbg_get_conversationdebuginfo_cursor(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {bigint} arg0
     */
    set cursor(arg0) {
        wasm.__wbg_set_conversationdebuginfo_cursor(this.__wbg_ptr, arg0);
    }
}

const ConversationListItemFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_conversationlistitem_free(ptr >>> 0, 1));

export class ConversationListItem {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ConversationListItem.prototype);
        obj.__wbg_ptr = ptr;
        ConversationListItemFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ConversationListItemFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_conversationlistitem_free(ptr, 0);
    }
    /**
     * @returns {Conversation}
     */
    get conversation() {
        const ret = wasm.__wbg_get_conversationlistitem_conversation(this.__wbg_ptr);
        return Conversation.__wrap(ret);
    }
    /**
     * @param {Conversation} arg0
     */
    set conversation(arg0) {
        _assertClass(arg0, Conversation);
        var ptr0 = arg0.__destroy_into_raw();
        wasm.__wbg_set_conversationlistitem_conversation(this.__wbg_ptr, ptr0);
    }
    /**
     * @returns {Message | undefined}
     */
    get lastMessage() {
        const ret = wasm.__wbg_get_conversationlistitem_lastMessage(this.__wbg_ptr);
        return ret === 0 ? undefined : Message.__wrap(ret);
    }
    /**
     * @param {Message | null} [arg0]
     */
    set lastMessage(arg0) {
        let ptr0 = 0;
        if (!isLikeNone(arg0)) {
            _assertClass(arg0, Message);
            ptr0 = arg0.__destroy_into_raw();
        }
        wasm.__wbg_set_conversationlistitem_lastMessage(this.__wbg_ptr, ptr0);
    }
    /**
     * @returns {boolean | undefined}
     */
    get isCommitLogForked() {
        const ret = wasm.__wbg_get_conversationlistitem_isCommitLogForked(this.__wbg_ptr);
        return ret === 0xFFFFFF ? undefined : ret !== 0;
    }
    /**
     * @param {boolean | null} [arg0]
     */
    set isCommitLogForked(arg0) {
        wasm.__wbg_set_conversationlistitem_isCommitLogForked(this.__wbg_ptr, isLikeNone(arg0) ? 0xFFFFFF : arg0 ? 1 : 0);
    }
    /**
     * @param {Conversation} conversation
     * @param {Message | null} [last_message]
     * @param {boolean | null} [is_commit_log_forked]
     */
    constructor(conversation, last_message, is_commit_log_forked) {
        _assertClass(conversation, Conversation);
        var ptr0 = conversation.__destroy_into_raw();
        let ptr1 = 0;
        if (!isLikeNone(last_message)) {
            _assertClass(last_message, Message);
            ptr1 = last_message.__destroy_into_raw();
        }
        const ret = wasm.conversationlistitem_new(ptr0, ptr1, isLikeNone(is_commit_log_forked) ? 0xFFFFFF : is_commit_log_forked ? 1 : 0);
        this.__wbg_ptr = ret >>> 0;
        ConversationListItemFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const ConversationsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_conversations_free(ptr >>> 0, 1));

export class Conversations {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Conversations.prototype);
        obj.__wbg_ptr = ptr;
        ConversationsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ConversationsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_conversations_free(ptr, 0);
    }
    /**
     * @param {CreateGroupOptions | null} [options]
     * @returns {Conversation}
     */
    createGroupOptimistic(options) {
        let ptr0 = 0;
        if (!isLikeNone(options)) {
            _assertClass(options, CreateGroupOptions);
            ptr0 = options.__destroy_into_raw();
        }
        const ret = wasm.conversations_createGroupOptimistic(this.__wbg_ptr, ptr0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Conversation.__wrap(ret[0]);
    }
    /**
     * @param {Identifier[]} account_identifiers
     * @param {CreateGroupOptions | null} [options]
     * @returns {Promise<Conversation>}
     */
    createGroup(account_identifiers, options) {
        const ptr0 = passArrayJsValueToWasm0(account_identifiers, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        let ptr1 = 0;
        if (!isLikeNone(options)) {
            _assertClass(options, CreateGroupOptions);
            ptr1 = options.__destroy_into_raw();
        }
        const ret = wasm.conversations_createGroup(this.__wbg_ptr, ptr0, len0, ptr1);
        return ret;
    }
    /**
     * @param {string[]} inbox_ids
     * @param {CreateGroupOptions | null} [options]
     * @returns {Promise<Conversation>}
     */
    createGroupByInboxIds(inbox_ids, options) {
        const ptr0 = passArrayJsValueToWasm0(inbox_ids, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        let ptr1 = 0;
        if (!isLikeNone(options)) {
            _assertClass(options, CreateGroupOptions);
            ptr1 = options.__destroy_into_raw();
        }
        const ret = wasm.conversations_createGroupByInboxIds(this.__wbg_ptr, ptr0, len0, ptr1);
        return ret;
    }
    /**
     * @param {Identifier} account_identifier
     * @param {CreateDMOptions | null} [options]
     * @returns {Promise<Conversation>}
     */
    createDm(account_identifier, options) {
        let ptr0 = 0;
        if (!isLikeNone(options)) {
            _assertClass(options, CreateDMOptions);
            ptr0 = options.__destroy_into_raw();
        }
        const ret = wasm.conversations_createDm(this.__wbg_ptr, account_identifier, ptr0);
        return ret;
    }
    /**
     * @param {string} inbox_id
     * @param {CreateDMOptions | null} [options]
     * @returns {Promise<Conversation>}
     */
    createDmByInboxId(inbox_id, options) {
        const ptr0 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        let ptr1 = 0;
        if (!isLikeNone(options)) {
            _assertClass(options, CreateDMOptions);
            ptr1 = options.__destroy_into_raw();
        }
        const ret = wasm.conversations_createDmByInboxId(this.__wbg_ptr, ptr0, len0, ptr1);
        return ret;
    }
    /**
     * @param {string} group_id
     * @returns {Conversation}
     */
    findGroupById(group_id) {
        const ptr0 = passStringToWasm0(group_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversations_findGroupById(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Conversation.__wrap(ret[0]);
    }
    /**
     * @param {string} target_inbox_id
     * @returns {Conversation}
     */
    findDmByTargetInboxId(target_inbox_id) {
        const ptr0 = passStringToWasm0(target_inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversations_findDmByTargetInboxId(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Conversation.__wrap(ret[0]);
    }
    /**
     * @param {string} message_id
     * @returns {Message}
     */
    findMessageById(message_id) {
        const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversations_findMessageById(this.__wbg_ptr, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return Message.__wrap(ret[0]);
    }
    /**
     * @returns {Promise<void>}
     */
    sync() {
        const ret = wasm.conversations_sync(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {any[] | null} [consent_states]
     * @returns {Promise<number>}
     */
    syncAllConversations(consent_states) {
        var ptr0 = isLikeNone(consent_states) ? 0 : passArrayJsValueToWasm0(consent_states, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversations_syncAllConversations(this.__wbg_ptr, ptr0, len0);
        return ret;
    }
    /**
     * @param {ListConversationsOptions | null} [opts]
     * @returns {Array<any>}
     */
    list(opts) {
        let ptr0 = 0;
        if (!isLikeNone(opts)) {
            _assertClass(opts, ListConversationsOptions);
            ptr0 = opts.__destroy_into_raw();
        }
        const ret = wasm.conversations_list(this.__wbg_ptr, ptr0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * @returns {any}
     */
    getHmacKeys() {
        const ret = wasm.conversations_getHmacKeys(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return takeFromExternrefTable0(ret[0]);
    }
    /**
     * Returns a 'ReadableStream' of Conversations
     * @param {ConversationType | null} [conversation_type]
     * @returns {Promise<ReadableStream>}
     */
    streamLocal(conversation_type) {
        const ret = wasm.conversations_streamLocal(this.__wbg_ptr, isLikeNone(conversation_type) ? 3 : conversation_type);
        return ret;
    }
    /**
     * @param {any} callback
     * @param {ConversationType | null} [conversation_type]
     * @returns {StreamCloser}
     */
    stream(callback, conversation_type) {
        const ret = wasm.conversations_stream(this.__wbg_ptr, callback, isLikeNone(conversation_type) ? 3 : conversation_type);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StreamCloser.__wrap(ret[0]);
    }
    /**
     * @param {any} callback
     * @param {ConversationType | null} [conversation_type]
     * @param {any[] | null} [consent_states]
     * @returns {StreamCloser}
     */
    streamAllMessages(callback, conversation_type, consent_states) {
        var ptr0 = isLikeNone(consent_states) ? 0 : passArrayJsValueToWasm0(consent_states, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.conversations_streamAllMessages(this.__wbg_ptr, callback, isLikeNone(conversation_type) ? 3 : conversation_type, ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StreamCloser.__wrap(ret[0]);
    }
    /**
     * @param {any} callback
     * @returns {StreamCloser}
     */
    streamConsent(callback) {
        const ret = wasm.conversations_streamConsent(this.__wbg_ptr, callback);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StreamCloser.__wrap(ret[0]);
    }
    /**
     * @param {any} callback
     * @returns {StreamCloser}
     */
    streamPreferences(callback) {
        const ret = wasm.conversations_streamPreferences(this.__wbg_ptr, callback);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return StreamCloser.__wrap(ret[0]);
    }
}

const CreateDMOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_createdmoptions_free(ptr >>> 0, 1));

export class CreateDMOptions {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        CreateDMOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_createdmoptions_free(ptr, 0);
    }
    /**
     * @returns {MessageDisappearingSettings | undefined}
     */
    get messageDisappearingSettings() {
        const ret = wasm.__wbg_get_createdmoptions_messageDisappearingSettings(this.__wbg_ptr);
        return ret === 0 ? undefined : MessageDisappearingSettings.__wrap(ret);
    }
    /**
     * @param {MessageDisappearingSettings | null} [arg0]
     */
    set messageDisappearingSettings(arg0) {
        let ptr0 = 0;
        if (!isLikeNone(arg0)) {
            _assertClass(arg0, MessageDisappearingSettings);
            ptr0 = arg0.__destroy_into_raw();
        }
        wasm.__wbg_set_createdmoptions_messageDisappearingSettings(this.__wbg_ptr, ptr0);
    }
    /**
     * @param {MessageDisappearingSettings | null} [message_disappearing_settings]
     */
    constructor(message_disappearing_settings) {
        let ptr0 = 0;
        if (!isLikeNone(message_disappearing_settings)) {
            _assertClass(message_disappearing_settings, MessageDisappearingSettings);
            ptr0 = message_disappearing_settings.__destroy_into_raw();
        }
        const ret = wasm.createdmoptions_new(ptr0);
        this.__wbg_ptr = ret >>> 0;
        CreateDMOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const CreateGroupOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_creategroupoptions_free(ptr >>> 0, 1));

export class CreateGroupOptions {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        CreateGroupOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_creategroupoptions_free(ptr, 0);
    }
    /**
     * @returns {GroupPermissionsOptions | undefined}
     */
    get permissions() {
        const ret = wasm.__wbg_get_creategroupoptions_permissions(this.__wbg_ptr);
        return ret === 3 ? undefined : ret;
    }
    /**
     * @param {GroupPermissionsOptions | null} [arg0]
     */
    set permissions(arg0) {
        wasm.__wbg_set_creategroupoptions_permissions(this.__wbg_ptr, isLikeNone(arg0) ? 3 : arg0);
    }
    /**
     * @returns {string | undefined}
     */
    get groupName() {
        const ret = wasm.__wbg_get_creategroupoptions_groupName(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @param {string | null} [arg0]
     */
    set groupName(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_creategroupoptions_groupName(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {string | undefined}
     */
    get groupImageUrlSquare() {
        const ret = wasm.__wbg_get_creategroupoptions_groupImageUrlSquare(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @param {string | null} [arg0]
     */
    set groupImageUrlSquare(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_creategroupoptions_groupImageUrlSquare(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {string | undefined}
     */
    get groupDescription() {
        const ret = wasm.__wbg_get_creategroupoptions_groupDescription(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @param {string | null} [arg0]
     */
    set groupDescription(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_creategroupoptions_groupDescription(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {PermissionPolicySet | undefined}
     */
    get customPermissionPolicySet() {
        const ret = wasm.__wbg_get_creategroupoptions_customPermissionPolicySet(this.__wbg_ptr);
        return ret === 0 ? undefined : PermissionPolicySet.__wrap(ret);
    }
    /**
     * @param {PermissionPolicySet | null} [arg0]
     */
    set customPermissionPolicySet(arg0) {
        let ptr0 = 0;
        if (!isLikeNone(arg0)) {
            _assertClass(arg0, PermissionPolicySet);
            ptr0 = arg0.__destroy_into_raw();
        }
        wasm.__wbg_set_creategroupoptions_customPermissionPolicySet(this.__wbg_ptr, ptr0);
    }
    /**
     * @returns {MessageDisappearingSettings | undefined}
     */
    get messageDisappearingSettings() {
        const ret = wasm.__wbg_get_createdmoptions_messageDisappearingSettings(this.__wbg_ptr);
        return ret === 0 ? undefined : MessageDisappearingSettings.__wrap(ret);
    }
    /**
     * @param {MessageDisappearingSettings | null} [arg0]
     */
    set messageDisappearingSettings(arg0) {
        let ptr0 = 0;
        if (!isLikeNone(arg0)) {
            _assertClass(arg0, MessageDisappearingSettings);
            ptr0 = arg0.__destroy_into_raw();
        }
        wasm.__wbg_set_createdmoptions_messageDisappearingSettings(this.__wbg_ptr, ptr0);
    }
    /**
     * @param {GroupPermissionsOptions | null} [permissions]
     * @param {string | null} [group_name]
     * @param {string | null} [group_image_url_square]
     * @param {string | null} [group_description]
     * @param {PermissionPolicySet | null} [custom_permission_policy_set]
     * @param {MessageDisappearingSettings | null} [message_disappearing_settings]
     */
    constructor(permissions, group_name, group_image_url_square, group_description, custom_permission_policy_set, message_disappearing_settings) {
        var ptr0 = isLikeNone(group_name) ? 0 : passStringToWasm0(group_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(group_image_url_square) ? 0 : passStringToWasm0(group_image_url_square, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = isLikeNone(group_description) ? 0 : passStringToWasm0(group_description, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        let ptr3 = 0;
        if (!isLikeNone(custom_permission_policy_set)) {
            _assertClass(custom_permission_policy_set, PermissionPolicySet);
            ptr3 = custom_permission_policy_set.__destroy_into_raw();
        }
        let ptr4 = 0;
        if (!isLikeNone(message_disappearing_settings)) {
            _assertClass(message_disappearing_settings, MessageDisappearingSettings);
            ptr4 = message_disappearing_settings.__destroy_into_raw();
        }
        const ret = wasm.creategroupoptions_new(isLikeNone(permissions) ? 3 : permissions, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, ptr4);
        this.__wbg_ptr = ret >>> 0;
        CreateGroupOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const EncodedContentFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_encodedcontent_free(ptr >>> 0, 1));

export class EncodedContent {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(EncodedContent.prototype);
        obj.__wbg_ptr = ptr;
        EncodedContentFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        EncodedContentFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_encodedcontent_free(ptr, 0);
    }
    /**
     * @returns {ContentTypeId | undefined}
     */
    get type() {
        const ret = wasm.__wbg_get_encodedcontent_type(this.__wbg_ptr);
        return ret === 0 ? undefined : ContentTypeId.__wrap(ret);
    }
    /**
     * @param {ContentTypeId | null} [arg0]
     */
    set type(arg0) {
        let ptr0 = 0;
        if (!isLikeNone(arg0)) {
            _assertClass(arg0, ContentTypeId);
            ptr0 = arg0.__destroy_into_raw();
        }
        wasm.__wbg_set_encodedcontent_type(this.__wbg_ptr, ptr0);
    }
    /**
     * @returns {any}
     */
    get parameters() {
        const ret = wasm.__wbg_get_encodedcontent_parameters(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {any} arg0
     */
    set parameters(arg0) {
        wasm.__wbg_set_encodedcontent_parameters(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {string | undefined}
     */
    get fallback() {
        const ret = wasm.__wbg_get_encodedcontent_fallback(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @param {string | null} [arg0]
     */
    set fallback(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_encodedcontent_fallback(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {number | undefined}
     */
    get compression() {
        const ret = wasm.__wbg_get_encodedcontent_compression(this.__wbg_ptr);
        return ret === 0x100000001 ? undefined : ret;
    }
    /**
     * @param {number | null} [arg0]
     */
    set compression(arg0) {
        wasm.__wbg_set_encodedcontent_compression(this.__wbg_ptr, isLikeNone(arg0) ? 0x100000001 : (arg0) >> 0);
    }
    /**
     * @returns {Uint8Array}
     */
    get content() {
        const ret = wasm.__wbg_get_encodedcontent_content(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Uint8Array} arg0
     */
    set content(arg0) {
        wasm.__wbg_set_encodedcontent_content(this.__wbg_ptr, arg0);
    }
    /**
     * @param {ContentTypeId | null | undefined} type
     * @param {any} parameters
     * @param {string | null | undefined} fallback
     * @param {number | null | undefined} compression
     * @param {Uint8Array} content
     */
    constructor(type, parameters, fallback, compression, content) {
        let ptr0 = 0;
        if (!isLikeNone(type)) {
            _assertClass(type, ContentTypeId);
            ptr0 = type.__destroy_into_raw();
        }
        var ptr1 = isLikeNone(fallback) ? 0 : passStringToWasm0(fallback, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        const ret = wasm.encodedcontent_new(ptr0, parameters, ptr1, len1, isLikeNone(compression) ? 0x100000001 : (compression) >> 0, content);
        this.__wbg_ptr = ret >>> 0;
        EncodedContentFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const GroupMemberFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_groupmember_free(ptr >>> 0, 1));

export class GroupMember {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        GroupMemberFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_groupmember_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    get inboxId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_groupmember_inboxId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set inboxId(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_consent_entity(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {Identifier[]}
     */
    get accountIdentifiers() {
        const ret = wasm.__wbg_get_groupmember_accountIdentifiers(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {Identifier[]} arg0
     */
    set accountIdentifiers(arg0) {
        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_groupmember_accountIdentifiers(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {string[]}
     */
    get installationIds() {
        const ret = wasm.__wbg_get_groupmember_installationIds(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {string[]} arg0
     */
    set installationIds(arg0) {
        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_groupmember_installationIds(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {PermissionLevel}
     */
    get permissionLevel() {
        const ret = wasm.__wbg_get_groupmember_permissionLevel(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PermissionLevel} arg0
     */
    set permissionLevel(arg0) {
        wasm.__wbg_set_groupmember_permissionLevel(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {ConsentState}
     */
    get consentState() {
        const ret = wasm.__wbg_get_groupmember_consentState(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {ConsentState} arg0
     */
    set consentState(arg0) {
        wasm.__wbg_set_groupmember_consentState(this.__wbg_ptr, arg0);
    }
    /**
     * @param {string} inboxId
     * @param {Identifier[]} accountIdentifiers
     * @param {string[]} installationIds
     * @param {PermissionLevel} permissionLevel
     * @param {ConsentState} consentState
     */
    constructor(inboxId, accountIdentifiers, installationIds, permissionLevel, consentState) {
        const ptr0 = passStringToWasm0(inboxId, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passArrayJsValueToWasm0(accountIdentifiers, wasm.__wbindgen_malloc);
        const len1 = WASM_VECTOR_LEN;
        const ptr2 = passArrayJsValueToWasm0(installationIds, wasm.__wbindgen_malloc);
        const len2 = WASM_VECTOR_LEN;
        const ret = wasm.groupmember_new(ptr0, len0, ptr1, len1, ptr2, len2, permissionLevel, consentState);
        this.__wbg_ptr = ret >>> 0;
        GroupMemberFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const GroupMetadataFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_groupmetadata_free(ptr >>> 0, 1));

export class GroupMetadata {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(GroupMetadata.prototype);
        obj.__wbg_ptr = ptr;
        GroupMetadataFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        GroupMetadataFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_groupmetadata_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    creatorInboxId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.groupmetadata_creatorInboxId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @returns {string}
     */
    conversationType() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.groupmetadata_conversationType(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
}

const GroupPermissionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_grouppermissions_free(ptr >>> 0, 1));

export class GroupPermissions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(GroupPermissions.prototype);
        obj.__wbg_ptr = ptr;
        GroupPermissionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        GroupPermissionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_grouppermissions_free(ptr, 0);
    }
    /**
     * @returns {GroupPermissionsOptions}
     */
    policyType() {
        const ret = wasm.grouppermissions_policyType(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0];
    }
    /**
     * @returns {PermissionPolicySet}
     */
    policySet() {
        const ret = wasm.grouppermissions_policySet(this.__wbg_ptr);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return PermissionPolicySet.__wrap(ret[0]);
    }
}

const HmacKeyFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_hmackey_free(ptr >>> 0, 1));

export class HmacKey {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        HmacKeyFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_hmackey_free(ptr, 0);
    }
    /**
     * @returns {Uint8Array}
     */
    get key() {
        const ret = wasm.__wbg_get_hmackey_key(this.__wbg_ptr);
        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v1;
    }
    /**
     * @param {Uint8Array} arg0
     */
    set key(arg0) {
        const ptr0 = passArray8ToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_hmackey_key(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {bigint}
     */
    get epoch() {
        const ret = wasm.__wbg_get_conversationdebuginfo_epoch(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {bigint} arg0
     */
    set epoch(arg0) {
        wasm.__wbg_set_conversationdebuginfo_epoch(this.__wbg_ptr, arg0);
    }
}

const IdentityStatsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_identitystats_free(ptr >>> 0, 1));

export class IdentityStats {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(IdentityStats.prototype);
        obj.__wbg_ptr = ptr;
        IdentityStatsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IdentityStatsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_identitystats_free(ptr, 0);
    }
    /**
     * @returns {bigint}
     */
    get publish_identity_update() {
        const ret = wasm.__wbg_get_apistats_upload_key_package(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set publish_identity_update(arg0) {
        wasm.__wbg_set_apistats_upload_key_package(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get get_identity_updates_v2() {
        const ret = wasm.__wbg_get_apistats_fetch_key_package(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set get_identity_updates_v2(arg0) {
        wasm.__wbg_set_apistats_fetch_key_package(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get get_inbox_ids() {
        const ret = wasm.__wbg_get_apistats_send_group_messages(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set get_inbox_ids(arg0) {
        wasm.__wbg_set_apistats_send_group_messages(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get verify_smart_contract_wallet_signature() {
        const ret = wasm.__wbg_get_apistats_send_welcome_messages(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set verify_smart_contract_wallet_signature(arg0) {
        wasm.__wbg_set_apistats_send_welcome_messages(this.__wbg_ptr, arg0);
    }
}

const InboxStateFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_inboxstate_free(ptr >>> 0, 1));

export class InboxState {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(InboxState.prototype);
        obj.__wbg_ptr = ptr;
        InboxStateFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        InboxStateFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_inboxstate_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    get inboxId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_inboxstate_inboxId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set inboxId(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_consent_entity(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {Identifier}
     */
    get recoveryIdentifier() {
        const ret = wasm.__wbg_get_inboxstate_recoveryIdentifier(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Identifier} arg0
     */
    set recoveryIdentifier(arg0) {
        wasm.__wbg_set_inboxstate_recoveryIdentifier(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {Installation[]}
     */
    get installations() {
        const ret = wasm.__wbg_get_inboxstate_installations(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {Installation[]} arg0
     */
    set installations(arg0) {
        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_inboxstate_installations(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {Identifier[]}
     */
    get accountIdentifiers() {
        const ret = wasm.__wbg_get_inboxstate_accountIdentifiers(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {Identifier[]} arg0
     */
    set accountIdentifiers(arg0) {
        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_inboxstate_accountIdentifiers(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @param {string} inbox_id
     * @param {Identifier} recovery_identifier
     * @param {Installation[]} installations
     * @param {Identifier[]} account_identifiers
     */
    constructor(inbox_id, recovery_identifier, installations, account_identifiers) {
        const ptr0 = passStringToWasm0(inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passArrayJsValueToWasm0(installations, wasm.__wbindgen_malloc);
        const len1 = WASM_VECTOR_LEN;
        const ptr2 = passArrayJsValueToWasm0(account_identifiers, wasm.__wbindgen_malloc);
        const len2 = WASM_VECTOR_LEN;
        const ret = wasm.inboxstate_new(ptr0, len0, recovery_identifier, ptr1, len1, ptr2, len2);
        this.__wbg_ptr = ret >>> 0;
        InboxStateFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const InstallationFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_installation_free(ptr >>> 0, 1));

export class Installation {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Installation.prototype);
        obj.__wbg_ptr = ptr;
        InstallationFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    static __unwrap(jsValue) {
        if (!(jsValue instanceof Installation)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        InstallationFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_installation_free(ptr, 0);
    }
    /**
     * @returns {Uint8Array}
     */
    get bytes() {
        const ret = wasm.__wbg_get_installation_bytes(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Uint8Array} arg0
     */
    set bytes(arg0) {
        wasm.__wbg_set_installation_bytes(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {string}
     */
    get id() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_installation_id(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set id(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_installation_id(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {bigint | undefined}
     */
    get clientTimestampNs() {
        const ret = wasm.__wbg_get_installation_clientTimestampNs(this.__wbg_ptr);
        return ret[0] === 0 ? undefined : BigInt.asUintN(64, ret[1]);
    }
    /**
     * @param {bigint | null} [arg0]
     */
    set clientTimestampNs(arg0) {
        wasm.__wbg_set_installation_clientTimestampNs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? BigInt(0) : arg0);
    }
    /**
     * @param {Uint8Array} bytes
     * @param {string} id
     * @param {bigint | null} [client_timestamp_ns]
     */
    constructor(bytes, id, client_timestamp_ns) {
        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.installation_new(bytes, ptr0, len0, !isLikeNone(client_timestamp_ns), isLikeNone(client_timestamp_ns) ? BigInt(0) : client_timestamp_ns);
        this.__wbg_ptr = ret >>> 0;
        InstallationFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const IntoUnderlyingByteSourceFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_intounderlyingbytesource_free(ptr >>> 0, 1));

export class IntoUnderlyingByteSource {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IntoUnderlyingByteSourceFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_intounderlyingbytesource_free(ptr, 0);
    }
    /**
     * @returns {ReadableStreamType}
     */
    get type() {
        const ret = wasm.intounderlyingbytesource_type(this.__wbg_ptr);
        return __wbindgen_enum_ReadableStreamType[ret];
    }
    /**
     * @returns {number}
     */
    get autoAllocateChunkSize() {
        const ret = wasm.intounderlyingbytesource_autoAllocateChunkSize(this.__wbg_ptr);
        return ret >>> 0;
    }
    /**
     * @param {ReadableByteStreamController} controller
     */
    start(controller) {
        wasm.intounderlyingbytesource_start(this.__wbg_ptr, controller);
    }
    /**
     * @param {ReadableByteStreamController} controller
     * @returns {Promise<any>}
     */
    pull(controller) {
        const ret = wasm.intounderlyingbytesource_pull(this.__wbg_ptr, controller);
        return ret;
    }
    cancel() {
        const ptr = this.__destroy_into_raw();
        wasm.intounderlyingbytesource_cancel(ptr);
    }
}

const IntoUnderlyingSinkFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_intounderlyingsink_free(ptr >>> 0, 1));

export class IntoUnderlyingSink {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IntoUnderlyingSinkFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_intounderlyingsink_free(ptr, 0);
    }
    /**
     * @param {any} chunk
     * @returns {Promise<any>}
     */
    write(chunk) {
        const ret = wasm.intounderlyingsink_write(this.__wbg_ptr, chunk);
        return ret;
    }
    /**
     * @returns {Promise<any>}
     */
    close() {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.intounderlyingsink_close(ptr);
        return ret;
    }
    /**
     * @param {any} reason
     * @returns {Promise<any>}
     */
    abort(reason) {
        const ptr = this.__destroy_into_raw();
        const ret = wasm.intounderlyingsink_abort(ptr, reason);
        return ret;
    }
}

const IntoUnderlyingSourceFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_intounderlyingsource_free(ptr >>> 0, 1));

export class IntoUnderlyingSource {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(IntoUnderlyingSource.prototype);
        obj.__wbg_ptr = ptr;
        IntoUnderlyingSourceFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        IntoUnderlyingSourceFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_intounderlyingsource_free(ptr, 0);
    }
    /**
     * @param {ReadableStreamDefaultController} controller
     * @returns {Promise<any>}
     */
    pull(controller) {
        const ret = wasm.intounderlyingsource_pull(this.__wbg_ptr, controller);
        return ret;
    }
    cancel() {
        const ptr = this.__destroy_into_raw();
        wasm.intounderlyingsource_cancel(ptr);
    }
}

const KeyPackageStatusFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_keypackagestatus_free(ptr >>> 0, 1));

export class KeyPackageStatus {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        KeyPackageStatusFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_keypackagestatus_free(ptr, 0);
    }
    /**
     * @returns {Lifetime | undefined}
     */
    get lifetime() {
        const ret = wasm.__wbg_get_keypackagestatus_lifetime(this.__wbg_ptr);
        return ret === 0 ? undefined : Lifetime.__wrap(ret);
    }
    /**
     * @param {Lifetime | null} [arg0]
     */
    set lifetime(arg0) {
        let ptr0 = 0;
        if (!isLikeNone(arg0)) {
            _assertClass(arg0, Lifetime);
            ptr0 = arg0.__destroy_into_raw();
        }
        wasm.__wbg_set_keypackagestatus_lifetime(this.__wbg_ptr, ptr0);
    }
    /**
     * @returns {string | undefined}
     */
    get validationError() {
        const ret = wasm.__wbg_get_keypackagestatus_validationError(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @param {string | null} [arg0]
     */
    set validationError(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_keypackagestatus_validationError(this.__wbg_ptr, ptr0, len0);
    }
}

const LifetimeFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_lifetime_free(ptr >>> 0, 1));

export class Lifetime {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Lifetime.prototype);
        obj.__wbg_ptr = ptr;
        LifetimeFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        LifetimeFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_lifetime_free(ptr, 0);
    }
    /**
     * @returns {bigint}
     */
    get not_before() {
        const ret = wasm.__wbg_get_lifetime_not_before(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set not_before(arg0) {
        wasm.__wbg_set_lifetime_not_before(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get not_after() {
        const ret = wasm.__wbg_get_lifetime_not_after(this.__wbg_ptr);
        return BigInt.asUintN(64, ret);
    }
    /**
     * @param {bigint} arg0
     */
    set not_after(arg0) {
        wasm.__wbg_set_lifetime_not_after(this.__wbg_ptr, arg0);
    }
}

const ListConversationsOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_listconversationsoptions_free(ptr >>> 0, 1));

export class ListConversationsOptions {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ListConversationsOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_listconversationsoptions_free(ptr, 0);
    }
    /**
     * @returns {any[] | undefined}
     */
    get consentStates() {
        const ret = wasm.__wbg_get_listconversationsoptions_consentStates(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        }
        return v1;
    }
    /**
     * @param {any[] | null} [arg0]
     */
    set consentStates(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_listconversationsoptions_consentStates(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {ConversationType | undefined}
     */
    get conversationType() {
        const ret = wasm.__wbg_get_listconversationsoptions_conversationType(this.__wbg_ptr);
        return ret === 3 ? undefined : ret;
    }
    /**
     * @param {ConversationType | null} [arg0]
     */
    set conversationType(arg0) {
        wasm.__wbg_set_listconversationsoptions_conversationType(this.__wbg_ptr, isLikeNone(arg0) ? 3 : arg0);
    }
    /**
     * @returns {bigint | undefined}
     */
    get createdAfterNs() {
        const ret = wasm.__wbg_get_listconversationsoptions_createdAfterNs(this.__wbg_ptr);
        return ret[0] === 0 ? undefined : ret[1];
    }
    /**
     * @param {bigint | null} [arg0]
     */
    set createdAfterNs(arg0) {
        wasm.__wbg_set_listconversationsoptions_createdAfterNs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? BigInt(0) : arg0);
    }
    /**
     * @returns {bigint | undefined}
     */
    get createdBeforeNs() {
        const ret = wasm.__wbg_get_listconversationsoptions_createdBeforeNs(this.__wbg_ptr);
        return ret[0] === 0 ? undefined : ret[1];
    }
    /**
     * @param {bigint | null} [arg0]
     */
    set createdBeforeNs(arg0) {
        wasm.__wbg_set_listconversationsoptions_createdBeforeNs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? BigInt(0) : arg0);
    }
    /**
     * @returns {boolean | undefined}
     */
    get includeDuplicateDms() {
        const ret = wasm.__wbg_get_listconversationsoptions_includeDuplicateDms(this.__wbg_ptr);
        return ret === 0xFFFFFF ? undefined : ret !== 0;
    }
    /**
     * @param {boolean | null} [arg0]
     */
    set includeDuplicateDms(arg0) {
        wasm.__wbg_set_listconversationsoptions_includeDuplicateDms(this.__wbg_ptr, isLikeNone(arg0) ? 0xFFFFFF : arg0 ? 1 : 0);
    }
    /**
     * @returns {bigint | undefined}
     */
    get limit() {
        const ret = wasm.__wbg_get_listconversationsoptions_limit(this.__wbg_ptr);
        return ret[0] === 0 ? undefined : ret[1];
    }
    /**
     * @param {bigint | null} [arg0]
     */
    set limit(arg0) {
        wasm.__wbg_set_listconversationsoptions_limit(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? BigInt(0) : arg0);
    }
    /**
     * @param {any[] | null} [consent_states]
     * @param {ConversationType | null} [conversation_type]
     * @param {bigint | null} [created_after_ns]
     * @param {bigint | null} [created_before_ns]
     * @param {boolean | null} [include_duplicate_dms]
     * @param {bigint | null} [limit]
     */
    constructor(consent_states, conversation_type, created_after_ns, created_before_ns, include_duplicate_dms, limit) {
        var ptr0 = isLikeNone(consent_states) ? 0 : passArrayJsValueToWasm0(consent_states, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.listconversationsoptions_new(ptr0, len0, isLikeNone(conversation_type) ? 3 : conversation_type, !isLikeNone(created_after_ns), isLikeNone(created_after_ns) ? BigInt(0) : created_after_ns, !isLikeNone(created_before_ns), isLikeNone(created_before_ns) ? BigInt(0) : created_before_ns, isLikeNone(include_duplicate_dms) ? 0xFFFFFF : include_duplicate_dms ? 1 : 0, !isLikeNone(limit), isLikeNone(limit) ? BigInt(0) : limit);
        this.__wbg_ptr = ret >>> 0;
        ListConversationsOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const ListMessagesOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_listmessagesoptions_free(ptr >>> 0, 1));

export class ListMessagesOptions {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ListMessagesOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_listmessagesoptions_free(ptr, 0);
    }
    /**
     * @returns {any[] | undefined}
     */
    get contentTypes() {
        const ret = wasm.__wbg_get_listmessagesoptions_contentTypes(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        }
        return v1;
    }
    /**
     * @param {any[] | null} [arg0]
     */
    set contentTypes(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_listmessagesoptions_contentTypes(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {bigint | undefined}
     */
    get sentBeforeNs() {
        const ret = wasm.__wbg_get_listmessagesoptions_sentBeforeNs(this.__wbg_ptr);
        return ret[0] === 0 ? undefined : ret[1];
    }
    /**
     * @param {bigint | null} [arg0]
     */
    set sentBeforeNs(arg0) {
        wasm.__wbg_set_listconversationsoptions_createdAfterNs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? BigInt(0) : arg0);
    }
    /**
     * @returns {bigint | undefined}
     */
    get sentAfterNs() {
        const ret = wasm.__wbg_get_listmessagesoptions_sentAfterNs(this.__wbg_ptr);
        return ret[0] === 0 ? undefined : ret[1];
    }
    /**
     * @param {bigint | null} [arg0]
     */
    set sentAfterNs(arg0) {
        wasm.__wbg_set_listconversationsoptions_createdBeforeNs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? BigInt(0) : arg0);
    }
    /**
     * @returns {bigint | undefined}
     */
    get limit() {
        const ret = wasm.__wbg_get_listmessagesoptions_limit(this.__wbg_ptr);
        return ret[0] === 0 ? undefined : ret[1];
    }
    /**
     * @param {bigint | null} [arg0]
     */
    set limit(arg0) {
        wasm.__wbg_set_listconversationsoptions_limit(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? BigInt(0) : arg0);
    }
    /**
     * @returns {DeliveryStatus | undefined}
     */
    get deliveryStatus() {
        const ret = wasm.__wbg_get_listmessagesoptions_deliveryStatus(this.__wbg_ptr);
        return ret === 3 ? undefined : ret;
    }
    /**
     * @param {DeliveryStatus | null} [arg0]
     */
    set deliveryStatus(arg0) {
        wasm.__wbg_set_listmessagesoptions_deliveryStatus(this.__wbg_ptr, isLikeNone(arg0) ? 3 : arg0);
    }
    /**
     * @returns {SortDirection | undefined}
     */
    get direction() {
        const ret = wasm.__wbg_get_listmessagesoptions_direction(this.__wbg_ptr);
        return ret === 2 ? undefined : ret;
    }
    /**
     * @param {SortDirection | null} [arg0]
     */
    set direction(arg0) {
        wasm.__wbg_set_listmessagesoptions_direction(this.__wbg_ptr, isLikeNone(arg0) ? 2 : arg0);
    }
    /**
     * @returns {GroupMessageKind | undefined}
     */
    get kind() {
        const ret = wasm.__wbg_get_listmessagesoptions_kind(this.__wbg_ptr);
        return ret === 2 ? undefined : ret;
    }
    /**
     * @param {GroupMessageKind | null} [arg0]
     */
    set kind(arg0) {
        wasm.__wbg_set_listmessagesoptions_kind(this.__wbg_ptr, isLikeNone(arg0) ? 2 : arg0);
    }
    /**
     * @param {bigint | null} [sent_before_ns]
     * @param {bigint | null} [sent_after_ns]
     * @param {bigint | null} [limit]
     * @param {DeliveryStatus | null} [delivery_status]
     * @param {SortDirection | null} [direction]
     * @param {any[] | null} [content_types]
     * @param {GroupMessageKind | null} [kind]
     */
    constructor(sent_before_ns, sent_after_ns, limit, delivery_status, direction, content_types, kind) {
        var ptr0 = isLikeNone(content_types) ? 0 : passArrayJsValueToWasm0(content_types, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        const ret = wasm.listmessagesoptions_new(!isLikeNone(sent_before_ns), isLikeNone(sent_before_ns) ? BigInt(0) : sent_before_ns, !isLikeNone(sent_after_ns), isLikeNone(sent_after_ns) ? BigInt(0) : sent_after_ns, !isLikeNone(limit), isLikeNone(limit) ? BigInt(0) : limit, isLikeNone(delivery_status) ? 3 : delivery_status, isLikeNone(direction) ? 2 : direction, ptr0, len0, isLikeNone(kind) ? 2 : kind);
        this.__wbg_ptr = ret >>> 0;
        ListMessagesOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const LogOptionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_logoptions_free(ptr >>> 0, 1));
/**
 * Specify options for the logger
 */
export class LogOptions {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        LogOptionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_logoptions_free(ptr, 0);
    }
    /**
     * enable structured JSON logging to stdout.Useful for third-party log viewers
     * @returns {boolean}
     */
    get structured() {
        const ret = wasm.__wbg_get_logoptions_structured(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * enable structured JSON logging to stdout.Useful for third-party log viewers
     * @param {boolean} arg0
     */
    set structured(arg0) {
        wasm.__wbg_set_logoptions_structured(this.__wbg_ptr, arg0);
    }
    /**
     * enable performance metrics for libxmtp in the `performance` tab
     * @returns {boolean}
     */
    get performance() {
        const ret = wasm.__wbg_get_logoptions_performance(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
     * enable performance metrics for libxmtp in the `performance` tab
     * @param {boolean} arg0
     */
    set performance(arg0) {
        wasm.__wbg_set_logoptions_performance(this.__wbg_ptr, arg0);
    }
    /**
     * filter for logs
     * @returns {LogLevel | undefined}
     */
    get level() {
        const ret = wasm.__wbg_get_logoptions_level(this.__wbg_ptr);
        return __wbindgen_enum_LogLevel[ret];
    }
    /**
     * filter for logs
     * @param {LogLevel | null} [arg0]
     */
    set level(arg0) {
        wasm.__wbg_set_logoptions_level(this.__wbg_ptr, isLikeNone(arg0) ? 7 : ((__wbindgen_enum_LogLevel.indexOf(arg0) + 1 || 7) - 1));
    }
    /**
     * @param {boolean} structured
     * @param {boolean} performance
     * @param {LogLevel | null} [level]
     */
    constructor(structured, performance, level) {
        const ret = wasm.logoptions_new(structured, performance, isLikeNone(level) ? 7 : ((__wbindgen_enum_LogLevel.indexOf(level) + 1 || 7) - 1));
        this.__wbg_ptr = ret >>> 0;
        LogOptionsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const MessageFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_message_free(ptr >>> 0, 1));

export class Message {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Message.prototype);
        obj.__wbg_ptr = ptr;
        MessageFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    static __unwrap(jsValue) {
        if (!(jsValue instanceof Message)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        MessageFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_message_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    get id() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_message_id(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set id(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_message_id(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {bigint}
     */
    get sentAtNs() {
        const ret = wasm.__wbg_get_conversationdebuginfo_epoch(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {bigint} arg0
     */
    set sentAtNs(arg0) {
        wasm.__wbg_set_conversationdebuginfo_epoch(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {string}
     */
    get convoId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_message_convoId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set convoId(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_message_convoId(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {string}
     */
    get senderInboxId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_message_senderInboxId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set senderInboxId(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_message_senderInboxId(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {EncodedContent}
     */
    get content() {
        const ret = wasm.__wbg_get_message_content(this.__wbg_ptr);
        return EncodedContent.__wrap(ret);
    }
    /**
     * @param {EncodedContent} arg0
     */
    set content(arg0) {
        _assertClass(arg0, EncodedContent);
        var ptr0 = arg0.__destroy_into_raw();
        wasm.__wbg_set_message_content(this.__wbg_ptr, ptr0);
    }
    /**
     * @returns {GroupMessageKind}
     */
    get kind() {
        const ret = wasm.__wbg_get_message_kind(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {GroupMessageKind} arg0
     */
    set kind(arg0) {
        wasm.__wbg_set_message_kind(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {DeliveryStatus}
     */
    get deliveryStatus() {
        const ret = wasm.__wbg_get_message_deliveryStatus(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {DeliveryStatus} arg0
     */
    set deliveryStatus(arg0) {
        wasm.__wbg_set_message_deliveryStatus(this.__wbg_ptr, arg0);
    }
    /**
     * @param {string} id
     * @param {bigint} sent_at_ns
     * @param {string} convo_id
     * @param {string} sender_inbox_id
     * @param {EncodedContent} content
     * @param {GroupMessageKind} kind
     * @param {DeliveryStatus} delivery_status
     */
    constructor(id, sent_at_ns, convo_id, sender_inbox_id, content, kind, delivery_status) {
        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(convo_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        const ptr2 = passStringToWasm0(sender_inbox_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len2 = WASM_VECTOR_LEN;
        _assertClass(content, EncodedContent);
        var ptr3 = content.__destroy_into_raw();
        const ret = wasm.message_new(ptr0, len0, sent_at_ns, ptr1, len1, ptr2, len2, ptr3, kind, delivery_status);
        this.__wbg_ptr = ret >>> 0;
        MessageFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const MessageDisappearingSettingsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_messagedisappearingsettings_free(ptr >>> 0, 1));

export class MessageDisappearingSettings {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(MessageDisappearingSettings.prototype);
        obj.__wbg_ptr = ptr;
        MessageDisappearingSettingsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        MessageDisappearingSettingsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_messagedisappearingsettings_free(ptr, 0);
    }
    /**
     * @returns {bigint}
     */
    get fromNs() {
        const ret = wasm.__wbg_get_conversationdebuginfo_epoch(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {bigint} arg0
     */
    set fromNs(arg0) {
        wasm.__wbg_set_conversationdebuginfo_epoch(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {bigint}
     */
    get inNs() {
        const ret = wasm.__wbg_get_conversationdebuginfo_cursor(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {bigint} arg0
     */
    set inNs(arg0) {
        wasm.__wbg_set_conversationdebuginfo_cursor(this.__wbg_ptr, arg0);
    }
    /**
     * @param {bigint} from_ns
     * @param {bigint} in_ns
     */
    constructor(from_ns, in_ns) {
        const ret = wasm.messagedisappearingsettings_new(from_ns, in_ns);
        this.__wbg_ptr = ret >>> 0;
        MessageDisappearingSettingsFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const MessageWithReactionsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_messagewithreactions_free(ptr >>> 0, 1));

export class MessageWithReactions {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(MessageWithReactions.prototype);
        obj.__wbg_ptr = ptr;
        MessageWithReactionsFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        MessageWithReactionsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_messagewithreactions_free(ptr, 0);
    }
    /**
     * @returns {Message}
     */
    get message() {
        const ret = wasm.__wbg_get_messagewithreactions_message(this.__wbg_ptr);
        return Message.__wrap(ret);
    }
    /**
     * @param {Message} arg0
     */
    set message(arg0) {
        _assertClass(arg0, Message);
        var ptr0 = arg0.__destroy_into_raw();
        wasm.__wbg_set_messagewithreactions_message(this.__wbg_ptr, ptr0);
    }
    /**
     * @returns {Message[]}
     */
    get reactions() {
        const ret = wasm.__wbg_get_messagewithreactions_reactions(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {Message[]} arg0
     */
    set reactions(arg0) {
        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_messagewithreactions_reactions(this.__wbg_ptr, ptr0, len0);
    }
}

const MultiRemoteAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_multiremoteattachment_free(ptr >>> 0, 1));

export class MultiRemoteAttachment {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(MultiRemoteAttachment.prototype);
        obj.__wbg_ptr = ptr;
        MultiRemoteAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        MultiRemoteAttachmentFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_multiremoteattachment_free(ptr, 0);
    }
    /**
     * @returns {RemoteAttachmentInfo[]}
     */
    get attachments() {
        const ret = wasm.__wbg_get_multiremoteattachment_attachments(this.__wbg_ptr);
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * @param {RemoteAttachmentInfo[]} arg0
     */
    set attachments(arg0) {
        const ptr0 = passArrayJsValueToWasm0(arg0, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_multiremoteattachment_attachments(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @param {RemoteAttachmentInfo[]} attachments
     */
    constructor(attachments) {
        const ptr0 = passArrayJsValueToWasm0(attachments, wasm.__wbindgen_malloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.multiremoteattachment_new(ptr0, len0);
        this.__wbg_ptr = ret >>> 0;
        MultiRemoteAttachmentFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const OpfsFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_opfs_free(ptr >>> 0, 1));

export class Opfs {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        OpfsFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_opfs_free(ptr, 0);
    }
    /**
     * @returns {Promise<void>}
     */
    static init_sqlite_opfs() {
        const ret = wasm.opfs_init_sqlite_opfs();
        return ret;
    }
    /**
     * Check if the global OPFS object has been initialized
     * @returns {boolean}
     */
    static exists() {
        const ret = wasm.opfs_exists();
        return ret !== 0;
    }
    /**
     * gets the error from Opfs, if any.
     * @returns {string | undefined}
     */
    static error() {
        const ret = wasm.opfs_error();
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @returns {Promise<void>}
     */
    static wipeFiles() {
        const ret = wasm.opfs_wipeFiles();
        return ret;
    }
    /**
     * If a virtual file exists with the given name, disassociates it from the pool and returns true, else returns false without side effects.
     * @param {string} name
     * @returns {boolean}
     */
    static rm(name) {
        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.opfs_rm(ptr0, len0);
        if (ret[2]) {
            throw takeFromExternrefTable0(ret[1]);
        }
        return ret[0] !== 0;
    }
    /**
     * list files in current pool
     * @returns {string[]}
     */
    static getFileNames() {
        const ret = wasm.opfs_getFileNames();
        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);
        return v1;
    }
    /**
     * import a db file at 'path'
     * @param {string} path
     * @param {Uint8Array} bytes
     */
    static importDb(path, bytes) {
        const ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.opfs_importDb(ptr0, len0, ptr1, len1);
        if (ret[1]) {
            throw takeFromExternrefTable0(ret[0]);
        }
    }
    /**
     * export db file with 'name'
     * @param {string} name
     * @returns {Uint8Array}
     */
    static exportFile(name) {
        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.opfs_exportFile(ptr0, len0);
        if (ret[3]) {
            throw takeFromExternrefTable0(ret[2]);
        }
        var v2 = getArrayU8FromWasm0(ret[0], ret[1]).slice();
        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        return v2;
    }
    /**
     * get number of files in pool
     * @returns {number}
     */
    static getFileCount() {
        const ret = wasm.opfs_getFileCount();
        return ret >>> 0;
    }
    /**
     * @returns {number}
     */
    static getCapacity() {
        const ret = wasm.opfs_getCapacity();
        return ret >>> 0;
    }
    /**
     * Adds n entries to the current pool.
     * @param {number} n
     * @returns {Promise<number>}
     */
    static addCapacity(n) {
        const ret = wasm.opfs_addCapacity(n);
        return ret;
    }
    /**
     * Removes up to n entries from the pool, with the caveat that it can only remove currently-unused entries.
     * @param {number} n
     * @returns {Promise<number>}
     */
    static reduceCapacity(n) {
        const ret = wasm.opfs_reduceCapacity(n);
        return ret;
    }
}

const PasskeySignatureFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_passkeysignature_free(ptr >>> 0, 1));

export class PasskeySignature {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PasskeySignatureFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_passkeysignature_free(ptr, 0);
    }
}

const PermissionPolicySetFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_permissionpolicyset_free(ptr >>> 0, 1));

export class PermissionPolicySet {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(PermissionPolicySet.prototype);
        obj.__wbg_ptr = ptr;
        PermissionPolicySetFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PermissionPolicySetFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_permissionpolicyset_free(ptr, 0);
    }
    /**
     * @returns {PermissionPolicy}
     */
    get addMemberPolicy() {
        const ret = wasm.__wbg_get_permissionpolicyset_addMemberPolicy(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PermissionPolicy} arg0
     */
    set addMemberPolicy(arg0) {
        wasm.__wbg_set_permissionpolicyset_addMemberPolicy(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {PermissionPolicy}
     */
    get removeMemberPolicy() {
        const ret = wasm.__wbg_get_permissionpolicyset_removeMemberPolicy(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PermissionPolicy} arg0
     */
    set removeMemberPolicy(arg0) {
        wasm.__wbg_set_permissionpolicyset_removeMemberPolicy(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {PermissionPolicy}
     */
    get addAdminPolicy() {
        const ret = wasm.__wbg_get_permissionpolicyset_addAdminPolicy(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PermissionPolicy} arg0
     */
    set addAdminPolicy(arg0) {
        wasm.__wbg_set_permissionpolicyset_addAdminPolicy(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {PermissionPolicy}
     */
    get removeAdminPolicy() {
        const ret = wasm.__wbg_get_permissionpolicyset_removeAdminPolicy(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PermissionPolicy} arg0
     */
    set removeAdminPolicy(arg0) {
        wasm.__wbg_set_permissionpolicyset_removeAdminPolicy(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {PermissionPolicy}
     */
    get updateGroupNamePolicy() {
        const ret = wasm.__wbg_get_permissionpolicyset_updateGroupNamePolicy(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PermissionPolicy} arg0
     */
    set updateGroupNamePolicy(arg0) {
        wasm.__wbg_set_permissionpolicyset_updateGroupNamePolicy(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {PermissionPolicy}
     */
    get updateGroupDescriptionPolicy() {
        const ret = wasm.__wbg_get_permissionpolicyset_updateGroupDescriptionPolicy(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PermissionPolicy} arg0
     */
    set updateGroupDescriptionPolicy(arg0) {
        wasm.__wbg_set_permissionpolicyset_updateGroupDescriptionPolicy(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {PermissionPolicy}
     */
    get updateGroupImageUrlSquarePolicy() {
        const ret = wasm.__wbg_get_permissionpolicyset_updateGroupImageUrlSquarePolicy(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PermissionPolicy} arg0
     */
    set updateGroupImageUrlSquarePolicy(arg0) {
        wasm.__wbg_set_permissionpolicyset_updateGroupImageUrlSquarePolicy(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {PermissionPolicy}
     */
    get updateMessageDisappearingPolicy() {
        const ret = wasm.__wbg_get_permissionpolicyset_updateMessageDisappearingPolicy(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {PermissionPolicy} arg0
     */
    set updateMessageDisappearingPolicy(arg0) {
        wasm.__wbg_set_permissionpolicyset_updateMessageDisappearingPolicy(this.__wbg_ptr, arg0);
    }
    /**
     * @param {PermissionPolicy} add_member_policy
     * @param {PermissionPolicy} remove_member_policy
     * @param {PermissionPolicy} add_admin_policy
     * @param {PermissionPolicy} remove_admin_policy
     * @param {PermissionPolicy} update_group_name_policy
     * @param {PermissionPolicy} update_group_description_policy
     * @param {PermissionPolicy} update_group_image_url_square_policy
     * @param {PermissionPolicy} update_message_disappearing_policy
     */
    constructor(add_member_policy, remove_member_policy, add_admin_policy, remove_admin_policy, update_group_name_policy, update_group_description_policy, update_group_image_url_square_policy, update_message_disappearing_policy) {
        const ret = wasm.permissionpolicyset_new(add_member_policy, remove_member_policy, add_admin_policy, remove_admin_policy, update_group_name_policy, update_group_description_policy, update_group_image_url_square_policy, update_message_disappearing_policy);
        this.__wbg_ptr = ret >>> 0;
        PermissionPolicySetFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const ReactionFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_reaction_free(ptr >>> 0, 1));

export class Reaction {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Reaction.prototype);
        obj.__wbg_ptr = ptr;
        ReactionFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ReactionFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_reaction_free(ptr, 0);
    }
    /**
     * @returns {string}
     */
    get reference() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_reaction_reference(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set reference(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_consent_entity(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {string}
     */
    get referenceInboxId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_reaction_referenceInboxId(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set referenceInboxId(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_contenttypeid_typeId(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {ReactionAction}
     */
    get action() {
        const ret = wasm.__wbg_get_reaction_action(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {ReactionAction} arg0
     */
    set action(arg0) {
        wasm.__wbg_set_reaction_action(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {string}
     */
    get content() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_reaction_content(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set content(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_reaction_content(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {ReactionSchema}
     */
    get schema() {
        const ret = wasm.__wbg_get_reaction_schema(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {ReactionSchema} arg0
     */
    set schema(arg0) {
        wasm.__wbg_set_reaction_schema(this.__wbg_ptr, arg0);
    }
    /**
     * @param {string} reference
     * @param {string} referenceInboxId
     * @param {ReactionAction} action
     * @param {string} content
     * @param {ReactionSchema} schema
     */
    constructor(reference, referenceInboxId, action, content, schema) {
        const ptr0 = passStringToWasm0(reference, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(referenceInboxId, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        const ptr2 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len2 = WASM_VECTOR_LEN;
        const ret = wasm.reaction_new(ptr0, len0, ptr1, len1, action, ptr2, len2, schema);
        this.__wbg_ptr = ret >>> 0;
        ReactionFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const RemoteAttachmentInfoFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_remoteattachmentinfo_free(ptr >>> 0, 1));

export class RemoteAttachmentInfo {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(RemoteAttachmentInfo.prototype);
        obj.__wbg_ptr = ptr;
        RemoteAttachmentInfoFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    static __unwrap(jsValue) {
        if (!(jsValue instanceof RemoteAttachmentInfo)) {
            return 0;
        }
        return jsValue.__destroy_into_raw();
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        RemoteAttachmentInfoFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_remoteattachmentinfo_free(ptr, 0);
    }
    /**
     * @returns {Uint8Array}
     */
    get secret() {
        const ret = wasm.__wbg_get_remoteattachmentinfo_secret(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Uint8Array} arg0
     */
    set secret(arg0) {
        wasm.__wbg_set_remoteattachmentinfo_secret(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {string}
     */
    get contentDigest() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_remoteattachmentinfo_contentDigest(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set contentDigest(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_remoteattachmentinfo_contentDigest(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {Uint8Array}
     */
    get nonce() {
        const ret = wasm.__wbg_get_remoteattachmentinfo_nonce(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Uint8Array} arg0
     */
    set nonce(arg0) {
        wasm.__wbg_set_remoteattachmentinfo_nonce(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {string}
     */
    get scheme() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_remoteattachmentinfo_scheme(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set scheme(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_remoteattachmentinfo_scheme(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {string}
     */
    get url() {
        let deferred1_0;
        let deferred1_1;
        try {
            const ret = wasm.__wbg_get_remoteattachmentinfo_url(this.__wbg_ptr);
            deferred1_0 = ret[0];
            deferred1_1 = ret[1];
            return getStringFromWasm0(ret[0], ret[1]);
        } finally {
            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
    }
    /**
     * @param {string} arg0
     */
    set url(arg0) {
        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_remoteattachmentinfo_url(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @returns {Uint8Array}
     */
    get salt() {
        const ret = wasm.__wbg_get_remoteattachmentinfo_salt(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Uint8Array} arg0
     */
    set salt(arg0) {
        wasm.__wbg_set_remoteattachmentinfo_salt(this.__wbg_ptr, arg0);
    }
    /**
     * @returns {number | undefined}
     */
    get contentLength() {
        const ret = wasm.__wbg_get_remoteattachmentinfo_contentLength(this.__wbg_ptr);
        return ret === 0x100000001 ? undefined : ret;
    }
    /**
     * @param {number | null} [arg0]
     */
    set contentLength(arg0) {
        wasm.__wbg_set_remoteattachmentinfo_contentLength(this.__wbg_ptr, isLikeNone(arg0) ? 0x100000001 : (arg0) >>> 0);
    }
    /**
     * @returns {string | undefined}
     */
    get filename() {
        const ret = wasm.__wbg_get_remoteattachmentinfo_filename(this.__wbg_ptr);
        let v1;
        if (ret[0] !== 0) {
            v1 = getStringFromWasm0(ret[0], ret[1]).slice();
            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);
        }
        return v1;
    }
    /**
     * @param {string | null} [arg0]
     */
    set filename(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_remoteattachmentinfo_filename(this.__wbg_ptr, ptr0, len0);
    }
    /**
     * @param {Uint8Array} secret
     * @param {string} contentDigest
     * @param {Uint8Array} nonce
     * @param {string} scheme
     * @param {string} url
     * @param {Uint8Array} salt
     * @param {number | null} [contentLength]
     * @param {string | null} [filename]
     */
    constructor(secret, contentDigest, nonce, scheme, url, salt, contentLength, filename) {
        const ptr0 = passStringToWasm0(contentDigest, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(scheme, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        const ptr2 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len2 = WASM_VECTOR_LEN;
        var ptr3 = isLikeNone(filename) ? 0 : passStringToWasm0(filename, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        const ret = wasm.remoteattachmentinfo_new(secret, ptr0, len0, nonce, ptr1, len1, ptr2, len2, salt, isLikeNone(contentLength) ? 0x100000001 : (contentLength) >>> 0, ptr3, len3);
        this.__wbg_ptr = ret >>> 0;
        RemoteAttachmentInfoFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }
}

const SignatureRequestHandleFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_signaturerequesthandle_free(ptr >>> 0, 1));

export class SignatureRequestHandle {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(SignatureRequestHandle.prototype);
        obj.__wbg_ptr = ptr;
        SignatureRequestHandleFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        SignatureRequestHandleFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_signaturerequesthandle_free(ptr, 0);
    }
    /**
     * @returns {Promise<string>}
     */
    signatureText() {
        const ret = wasm.signaturerequesthandle_signatureText(this.__wbg_ptr);
        return ret;
    }
    /**
     * @param {Uint8Array} signature_bytes
     * @returns {Promise<void>}
     */
    addEcdsaSignature(signature_bytes) {
        const ret = wasm.signaturerequesthandle_addEcdsaSignature(this.__wbg_ptr, signature_bytes);
        return ret;
    }
    /**
     * @param {PasskeySignature} signature
     * @returns {Promise<void>}
     */
    addPasskeySignature(signature) {
        _assertClass(signature, PasskeySignature);
        var ptr0 = signature.__destroy_into_raw();
        const ret = wasm.signaturerequesthandle_addPasskeySignature(this.__wbg_ptr, ptr0);
        return ret;
    }
    /**
     * @param {Identifier} account_identifier
     * @param {Uint8Array} signature_bytes
     * @param {bigint} chain_id
     * @param {bigint | null} [block_number]
     * @returns {Promise<void>}
     */
    addScwSignature(account_identifier, signature_bytes, chain_id, block_number) {
        const ret = wasm.signaturerequesthandle_addScwSignature(this.__wbg_ptr, account_identifier, signature_bytes, chain_id, !isLikeNone(block_number), isLikeNone(block_number) ? BigInt(0) : block_number);
        return ret;
    }
}

const StreamCloserFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_streamcloser_free(ptr >>> 0, 1));

export class StreamCloser {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(StreamCloser.prototype);
        obj.__wbg_ptr = ptr;
        StreamCloserFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        StreamCloserFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_streamcloser_free(ptr, 0);
    }
    /**
     * Signal the stream to end
     * Does not wait for the stream to end.
     */
    end() {
        wasm.streamcloser_end(this.__wbg_ptr);
    }
    /**
     * End the stream and `await` for it to shutdown
     * Returns the `Result` of the task.
     * End the stream and asynchronously wait for it to shutdown
     * @returns {Promise<void>}
     */
    endAndWait() {
        const ret = wasm.streamcloser_endAndWait(this.__wbg_ptr);
        return ret;
    }
    /**
     * @returns {Promise<void>}
     */
    waitForReady() {
        const ret = wasm.streamcloser_waitForReady(this.__wbg_ptr);
        return ret;
    }
    /**
     * Checks if this stream is closed
     * @returns {boolean}
     */
    isClosed() {
        const ret = wasm.streamcloser_isClosed(this.__wbg_ptr);
        return ret !== 0;
    }
}

async function __wbg_load(module, imports) {
    if (typeof Response === 'function' && module instanceof Response) {
        if (typeof WebAssembly.instantiateStreaming === 'function') {
            try {
                return await WebAssembly.instantiateStreaming(module, imports);

            } catch (e) {
                if (module.headers.get('Content-Type') != 'application/wasm') {
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);

                } else {
                    throw e;
                }
            }
        }

        const bytes = await module.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);

    } else {
        const instance = await WebAssembly.instantiate(module, imports);

        if (instance instanceof WebAssembly.Instance) {
            return { instance, module };

        } else {
            return instance;
        }
    }
}

function __wbg_get_imports() {
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbg_String_8f0eb39a4a4c2f66 = function(arg0, arg1) {
        const ret = String(arg1);
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
    };
    imports.wbg.__wbg_abort_410ec47a64ac6117 = function(arg0, arg1) {
        arg0.abort(arg1);
    };
    imports.wbg.__wbg_abort_775ef1d17fc65868 = function(arg0) {
        arg0.abort();
    };
    imports.wbg.__wbg_add_883d9432f9188ef2 = function(arg0, arg1) {
        const ret = arg0.add(arg1);
        return ret;
    };
    imports.wbg.__wbg_append_8c7dd8d641a5f01b = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {
        arg0.append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));
    }, arguments) };
    imports.wbg.__wbg_arrayBuffer_d1b44c4390db422f = function() { return handleError(function (arg0) {
        const ret = arg0.arrayBuffer();
        return ret;
    }, arguments) };
    imports.wbg.__wbg_body_0b8fd1fe671660df = function(arg0) {
        const ret = arg0.body;
        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
    };
    imports.wbg.__wbg_buffer_09165b52af8c5237 = function(arg0) {
        const ret = arg0.buffer;
        return ret;
    };
    imports.wbg.__wbg_buffer_609cc3eee51ed158 = function(arg0) {
        const ret = arg0.buffer;
        return ret;
    };
    imports.wbg.__wbg_byobRequest_77d9adf63337edfb = function(arg0) {
        const ret = arg0.byobRequest;
        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
    };
    imports.wbg.__wbg_byteLength_e674b853d9c77e1d = function(arg0) {
        const ret = arg0.byteLength;
        return ret;
    };
    imports.wbg.__wbg_byteOffset_fd862df290ef848d = function(arg0) {
        const ret = arg0.byteOffset;
        return ret;
    };
    imports.wbg.__wbg_call_672a4d21634d4a24 = function() { return handleError(function (arg0, arg1) {
        const ret = arg0.call(arg1);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_call_7cccdd69e0791ae2 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = arg0.call(arg1, arg2);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_cancel_8a308660caa6cadf = function(arg0) {
        const ret = arg0.cancel();
        return ret;
    };
    imports.wbg.__wbg_catch_a6e601879b2610e9 = function(arg0, arg1) {
        const ret = arg0.catch(arg1);
        return ret;
    };
    imports.wbg.__wbg_clearInterval_dd1e598f425db353 = function(arg0) {
        const ret = clearInterval(arg0);
        return ret;
    };
    imports.wbg.__wbg_clearTimeout_5a54f8841c30079a = function(arg0) {
        const ret = clearTimeout(arg0);
        return ret;
    };
    imports.wbg.__wbg_clearTimeout_6222fede17abcb1a = function(arg0) {
        const ret = clearTimeout(arg0);
        return ret;
    };
    imports.wbg.__wbg_clear_1f96150ecf4061a6 = function(arg0) {
        arg0.clear();
    };
    imports.wbg.__wbg_clear_fca8ee600282eba4 = function(arg0) {
        arg0.clear();
    };
    imports.wbg.__wbg_client_new = function(arg0) {
        const ret = Client.__wrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_close_304cc1fef3466669 = function() { return handleError(function (arg0) {
        arg0.close();
    }, arguments) };
    imports.wbg.__wbg_close_5ce03e29be453811 = function() { return handleError(function (arg0) {
        arg0.close();
    }, arguments) };
    imports.wbg.__wbg_close_a17af48266bd9942 = function(arg0) {
        arg0.close();
    };
    imports.wbg.__wbg_code_cfd8f6868bdaed9b = function(arg0) {
        const ret = arg0.code;
        return ret;
    };
    imports.wbg.__wbg_consent_unwrap = function(arg0) {
        const ret = Consent.__unwrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_conversation_new = function(arg0) {
        const ret = Conversation.__wrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_conversationlistitem_new = function(arg0) {
        const ret = ConversationListItem.__wrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_createSyncAccessHandle_21c18bcd2a29fa13 = function(arg0) {
        const ret = arg0.createSyncAccessHandle();
        return ret;
    };
    imports.wbg.__wbg_create_cfe43ccc88c64e0a = function(arg0) {
        const ret = Object.create(arg0);
        return ret;
    };
    imports.wbg.__wbg_crypto_574e78ad8b13b65f = function(arg0) {
        const ret = arg0.crypto;
        return ret;
    };
    imports.wbg.__wbg_debug_3cb59063b29f58c1 = function(arg0) {
        console.debug(arg0);
    };
    imports.wbg.__wbg_debug_e17b51583ca6a632 = function(arg0, arg1, arg2, arg3) {
        console.debug(arg0, arg1, arg2, arg3);
    };
    imports.wbg.__wbg_delete_36c8630e530a2a1a = function(arg0, arg1) {
        const ret = arg0.delete(arg1);
        return ret;
    };
    imports.wbg.__wbg_delete_d6860deb47204f3b = function(arg0, arg1) {
        const ret = arg0.delete(arg1);
        return ret;
    };
    imports.wbg.__wbg_done_769e5ede4b31c67b = function(arg0) {
        const ret = arg0.done;
        return ret;
    };
    imports.wbg.__wbg_enqueue_bb16ba72f537dc9e = function() { return handleError(function (arg0, arg1) {
        arg0.enqueue(arg1);
    }, arguments) };
    imports.wbg.__wbg_entries_19efe296f7d36df9 = function(arg0) {
        const ret = arg0.entries();
        return ret;
    };
    imports.wbg.__wbg_entries_3265d4158b33e5dc = function(arg0) {
        const ret = Object.entries(arg0);
        return ret;
    };
    imports.wbg.__wbg_error_524f506f44df1645 = function(arg0) {
        console.error(arg0);
    };
    imports.wbg.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {
        let deferred0_0;
        let deferred0_1;
        try {
            deferred0_0 = arg0;
            deferred0_1 = arg1;
            console.error(getStringFromWasm0(arg0, arg1));
        } finally {
            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);
        }
    };
    imports.wbg.__wbg_error_80de38b3f7cc3c3c = function(arg0, arg1, arg2, arg3) {
        console.error(arg0, arg1, arg2, arg3);
    };
    imports.wbg.__wbg_error_e98c298703cffa97 = function(arg0, arg1) {
        console.error(getStringFromWasm0(arg0, arg1));
    };
    imports.wbg.__wbg_fetch_509096533071c657 = function(arg0, arg1) {
        const ret = arg0.fetch(arg1);
        return ret;
    };
    imports.wbg.__wbg_fetch_f156d10be9a5c88a = function(arg0) {
        const ret = fetch(arg0);
        return ret;
    };
    imports.wbg.__wbg_fill_3311db9cdf18c6c4 = function(arg0, arg1, arg2, arg3) {
        const ret = arg0.fill(arg1, arg2 >>> 0, arg3 >>> 0);
        return ret;
    };
    imports.wbg.__wbg_flush_1a680a66b21c53d7 = function() { return handleError(function (arg0) {
        arg0.flush();
    }, arguments) };
    imports.wbg.__wbg_from_2a5d3e218e67aa85 = function(arg0) {
        const ret = Array.from(arg0);
        return ret;
    };
    imports.wbg.__wbg_getDate_ef336e14594b35ce = function(arg0) {
        const ret = arg0.getDate();
        return ret;
    };
    imports.wbg.__wbg_getDay_3da98b461c969439 = function(arg0) {
        const ret = arg0.getDay();
        return ret;
    };
    imports.wbg.__wbg_getDirectoryHandle_c48a138373d79b3d = function(arg0, arg1, arg2, arg3) {
        const ret = arg0.getDirectoryHandle(getStringFromWasm0(arg1, arg2), arg3);
        return ret;
    };
    imports.wbg.__wbg_getDirectory_c206b0540c9acc0f = function(arg0) {
        const ret = arg0.getDirectory();
        return ret;
    };
    imports.wbg.__wbg_getFileHandle_5fb877d1ecc74d52 = function(arg0, arg1, arg2, arg3) {
        const ret = arg0.getFileHandle(getStringFromWasm0(arg1, arg2), arg3);
        return ret;
    };
    imports.wbg.__wbg_getFullYear_17d3c9e4db748eb7 = function(arg0) {
        const ret = arg0.getFullYear();
        return ret;
    };
    imports.wbg.__wbg_getHours_70451b8de3ce8638 = function(arg0) {
        const ret = arg0.getHours();
        return ret;
    };
    imports.wbg.__wbg_getMinutes_e793d718371e18f7 = function(arg0) {
        const ret = arg0.getMinutes();
        return ret;
    };
    imports.wbg.__wbg_getMonth_d37edcd23642c97d = function(arg0) {
        const ret = arg0.getMonth();
        return ret;
    };
    imports.wbg.__wbg_getRandomValues_3c9c0d586e575a16 = function() { return handleError(function (arg0, arg1) {
        globalThis.crypto.getRandomValues(getArrayU8FromWasm0(arg0, arg1));
    }, arguments) };
    imports.wbg.__wbg_getRandomValues_8e6341dd77432a34 = function() { return handleError(function (arg0, arg1) {
        globalThis.crypto.getRandomValues(getArrayU8FromWasm0(arg0, arg1));
    }, arguments) };
    imports.wbg.__wbg_getRandomValues_b8f5dbd5f3995a9e = function() { return handleError(function (arg0, arg1) {
        arg0.getRandomValues(arg1);
    }, arguments) };
    imports.wbg.__wbg_getReader_48e00749fe3f6089 = function() { return handleError(function (arg0) {
        const ret = arg0.getReader();
        return ret;
    }, arguments) };
    imports.wbg.__wbg_getSeconds_755197b634cca692 = function(arg0) {
        const ret = arg0.getSeconds();
        return ret;
    };
    imports.wbg.__wbg_getSize_e7dbd5ffa0b43df1 = function() { return handleError(function (arg0) {
        const ret = arg0.getSize();
        return ret;
    }, arguments) };
    imports.wbg.__wbg_getTime_46267b1c24877e30 = function(arg0) {
        const ret = arg0.getTime();
        return ret;
    };
    imports.wbg.__wbg_getTimezoneOffset_6b5752021c499c47 = function(arg0) {
        const ret = arg0.getTimezoneOffset();
        return ret;
    };
    imports.wbg.__wbg_getUint32_9c3cc8fde7919ed4 = function(arg0, arg1) {
        const ret = arg0.getUint32(arg1 >>> 0);
        return ret;
    };
    imports.wbg.__wbg_get_13495dac72693ecc = function(arg0, arg1) {
        const ret = arg0.get(arg1);
        return ret;
    };
    imports.wbg.__wbg_get_67b2ba62fc30de12 = function() { return handleError(function (arg0, arg1) {
        const ret = Reflect.get(arg0, arg1);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_get_b9b93047fe3cf45b = function(arg0, arg1) {
        const ret = arg0[arg1 >>> 0];
        return ret;
    };
    imports.wbg.__wbg_getdone_d47073731acd3e74 = function(arg0) {
        const ret = arg0.done;
        return isLikeNone(ret) ? 0xFFFFFF : ret ? 1 : 0;
    };
    imports.wbg.__wbg_getindex_5b00c274b05714aa = function(arg0, arg1) {
        const ret = arg0[arg1 >>> 0];
        return ret;
    };
    imports.wbg.__wbg_getvalue_009dcd63692bee1f = function(arg0) {
        const ret = arg0.value;
        return ret;
    };
    imports.wbg.__wbg_getwithrefkey_1dc361bd10053bfe = function(arg0, arg1) {
        const ret = arg0[arg1];
        return ret;
    };
    imports.wbg.__wbg_groupmetadata_new = function(arg0) {
        const ret = GroupMetadata.__wrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_has_76ca66e2f25d1c49 = function(arg0, arg1) {
        const ret = arg0.has(arg1);
        return ret;
    };
    imports.wbg.__wbg_has_a5ea9117f258a0ec = function() { return handleError(function (arg0, arg1) {
        const ret = Reflect.has(arg0, arg1);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_headers_9cb51cfd2ac780a4 = function(arg0) {
        const ret = arg0.headers;
        return ret;
    };
    imports.wbg.__wbg_inboxstate_new = function(arg0) {
        const ret = InboxState.__wrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_info_033d8b8a0838f1d3 = function(arg0, arg1, arg2, arg3) {
        console.info(arg0, arg1, arg2, arg3);
    };
    imports.wbg.__wbg_info_3daf2e093e091b66 = function(arg0) {
        console.info(arg0);
    };
    imports.wbg.__wbg_installation_new = function(arg0) {
        const ret = Installation.__wrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_installation_unwrap = function(arg0) {
        const ret = Installation.__unwrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_instanceof_ArrayBuffer_e14585432e3737fc = function(arg0) {
        let result;
        try {
            result = arg0 instanceof ArrayBuffer;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_instanceof_DomException_ed1ccb7aaf39034c = function(arg0) {
        let result;
        try {
            result = arg0 instanceof DOMException;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_instanceof_Performance_0ac1286c87171f57 = function(arg0) {
        let result;
        try {
            result = arg0 instanceof Performance;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_instanceof_Response_f2cc20d9f7dfd644 = function(arg0) {
        let result;
        try {
            result = arg0 instanceof Response;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_instanceof_Uint8Array_17156bcf118086a9 = function(arg0) {
        let result;
        try {
            result = arg0 instanceof Uint8Array;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_instanceof_WorkerGlobalScope_dbdbdea7e3b56493 = function(arg0) {
        let result;
        try {
            result = arg0 instanceof WorkerGlobalScope;
        } catch (_) {
            result = false;
        }
        const ret = result;
        return ret;
    };
    imports.wbg.__wbg_iterator_9a24c88df860dc65 = function() {
        const ret = Symbol.iterator;
        return ret;
    };
    imports.wbg.__wbg_keys_4e7df9a04572b339 = function(arg0) {
        const ret = arg0.keys();
        return ret;
    };
    imports.wbg.__wbg_keys_867d2062f5df73dc = function(arg0) {
        const ret = arg0.keys();
        return ret;
    };
    imports.wbg.__wbg_length_a446193dc22c12f8 = function(arg0) {
        const ret = arg0.length;
        return ret;
    };
    imports.wbg.__wbg_length_d56737991078581b = function(arg0) {
        const ret = arg0.length;
        return ret;
    };
    imports.wbg.__wbg_length_e2d2a49132c1b256 = function(arg0) {
        const ret = arg0.length;
        return ret;
    };
    imports.wbg.__wbg_mark_05056c522bddc362 = function() { return handleError(function (arg0, arg1, arg2) {
        arg0.mark(getStringFromWasm0(arg1, arg2));
    }, arguments) };
    imports.wbg.__wbg_mark_24a1a597f4f00679 = function() { return handleError(function (arg0, arg1, arg2, arg3) {
        arg0.mark(getStringFromWasm0(arg1, arg2), arg3);
    }, arguments) };
    imports.wbg.__wbg_measure_0b7379f5cfacac6d = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
        arg0.measure(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), getStringFromWasm0(arg5, arg6));
    }, arguments) };
    imports.wbg.__wbg_measure_7728846525e2cced = function() { return handleError(function (arg0, arg1, arg2, arg3) {
        arg0.measure(getStringFromWasm0(arg1, arg2), arg3);
    }, arguments) };
    imports.wbg.__wbg_message_5c5d919204d42400 = function(arg0, arg1) {
        const ret = arg1.message;
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
    };
    imports.wbg.__wbg_message_new = function(arg0) {
        const ret = Message.__wrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_message_unwrap = function(arg0) {
        const ret = Message.__unwrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_messagewithreactions_new = function(arg0) {
        const ret = MessageWithReactions.__wrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_msCrypto_a61aeb35a24c1329 = function(arg0) {
        const ret = arg0.msCrypto;
        return ret;
    };
    imports.wbg.__wbg_name_f2d27098bfd843e7 = function(arg0, arg1) {
        const ret = arg1.name;
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
    };
    imports.wbg.__wbg_navigator_0a9bf1120e24fec2 = function(arg0) {
        const ret = arg0.navigator;
        return ret;
    };
    imports.wbg.__wbg_new0_f788a2397c7ca929 = function() {
        const ret = new Date();
        return ret;
    };
    imports.wbg.__wbg_new_018dcc2d6c8c2f6a = function() { return handleError(function () {
        const ret = new Headers();
        return ret;
    }, arguments) };
    imports.wbg.__wbg_new_23a2665fac83c611 = function(arg0, arg1) {
        try {
            var state0 = {a: arg0, b: arg1};
            var cb0 = (arg0, arg1) => {
                const a = state0.a;
                state0.a = 0;
                try {
                    return __wbg_adapter_793(a, state0.b, arg0, arg1);
                } finally {
                    state0.a = a;
                }
            };
            const ret = new Promise(cb0);
            return ret;
        } finally {
            state0.a = state0.b = 0;
        }
    };
    imports.wbg.__wbg_new_31a97dac4f10fab7 = function(arg0) {
        const ret = new Date(arg0);
        return ret;
    };
    imports.wbg.__wbg_new_405e22f390576ce2 = function() {
        const ret = new Object();
        return ret;
    };
    imports.wbg.__wbg_new_5e0be73521bc8c17 = function() {
        const ret = new Map();
        return ret;
    };
    imports.wbg.__wbg_new_78feb108b6472713 = function() {
        const ret = new Array();
        return ret;
    };
    imports.wbg.__wbg_new_7e079fa25e135eb1 = function(arg0, arg1, arg2) {
        const ret = new DataView(arg0, arg1 >>> 0, arg2 >>> 0);
        return ret;
    };
    imports.wbg.__wbg_new_8a6f238a6ece86ea = function() {
        const ret = new Error();
        return ret;
    };
    imports.wbg.__wbg_new_a12002a7f91c75be = function(arg0) {
        const ret = new Uint8Array(arg0);
        return ret;
    };
    imports.wbg.__wbg_new_a239edaa1dc2968f = function(arg0) {
        const ret = new Set(arg0);
        return ret;
    };
    imports.wbg.__wbg_new_c68d7209be747379 = function(arg0, arg1) {
        const ret = new Error(getStringFromWasm0(arg0, arg1));
        return ret;
    };
    imports.wbg.__wbg_new_e25e5aab09ff45db = function() { return handleError(function () {
        const ret = new AbortController();
        return ret;
    }, arguments) };
    imports.wbg.__wbg_newnoargs_105ed471475aaf50 = function(arg0, arg1) {
        const ret = new Function(getStringFromWasm0(arg0, arg1));
        return ret;
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a = function(arg0, arg1, arg2) {
        const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);
        return ret;
    };
    imports.wbg.__wbg_newwithintounderlyingsource_b47f6a6a596a7f24 = function(arg0, arg1) {
        const ret = new ReadableStream(IntoUnderlyingSource.__wrap(arg0), arg1);
        return ret;
    };
    imports.wbg.__wbg_newwithlength_a381634e90c276d4 = function(arg0) {
        const ret = new Uint8Array(arg0 >>> 0);
        return ret;
    };
    imports.wbg.__wbg_newwithstrandinit_06c535e0a867c635 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = new Request(getStringFromWasm0(arg0, arg1), arg2);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_newwithyearmonthday_03748851282a850d = function(arg0, arg1, arg2) {
        const ret = new Date(arg0 >>> 0, arg1, arg2);
        return ret;
    };
    imports.wbg.__wbg_next_25feadfc0913fea9 = function(arg0) {
        const ret = arg0.next;
        return ret;
    };
    imports.wbg.__wbg_next_6574e1a8a62d1055 = function() { return handleError(function (arg0) {
        const ret = arg0.next();
        return ret;
    }, arguments) };
    imports.wbg.__wbg_next_c3ab0d59847b3b5c = function() { return handleError(function (arg0) {
        const ret = arg0.next();
        return ret;
    }, arguments) };
    imports.wbg.__wbg_node_905d3e251edff8a2 = function(arg0) {
        const ret = arg0.node;
        return ret;
    };
    imports.wbg.__wbg_now_2c95c9de01293173 = function(arg0) {
        const ret = arg0.now();
        return ret;
    };
    imports.wbg.__wbg_now_2f0bbf3fd348701f = function(arg0) {
        const ret = globalThis.performance.now();
        getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);
        getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);
    };
    imports.wbg.__wbg_now_807e54c39636c349 = function() {
        const ret = Date.now();
        return ret;
    };
    imports.wbg.__wbg_now_d18023d54d4e5500 = function(arg0) {
        const ret = arg0.now();
        return ret;
    };
    imports.wbg.__wbg_onclose_41c0e518c248c385 = function(arg0) {
        arg0.on_close();
    };
    imports.wbg.__wbg_onconsentupdate_db1d3557f75e3dcb = function(arg0, arg1) {
        arg0.on_consent_update(arg1);
    };
    imports.wbg.__wbg_onconversation_db4f9c3d8e604f5d = function(arg0, arg1) {
        arg0.on_conversation(Conversation.__wrap(arg1));
    };
    imports.wbg.__wbg_onerror_2796011afc1733e7 = function(arg0, arg1) {
        arg0.on_error(arg1);
    };
    imports.wbg.__wbg_onmessage_887b149a5a48d19c = function(arg0, arg1) {
        arg0.on_message(Message.__wrap(arg1));
    };
    imports.wbg.__wbg_onuserpreferenceupdate_fd1d58e970305771 = function(arg0, arg1, arg2) {
        var v0 = getArrayJsValueFromWasm0(arg1, arg2).slice();
        wasm.__wbindgen_free(arg1, arg2 * 4, 4);
        arg0.on_user_preference_update(v0);
    };
    imports.wbg.__wbg_performance_121b9855d716e029 = function() {
        const ret = globalThis.performance;
        return ret;
    };
    imports.wbg.__wbg_performance_7a3ffd0b17f663ad = function(arg0) {
        const ret = arg0.performance;
        return ret;
    };
    imports.wbg.__wbg_postMessage_83a8d58d3fcb6c13 = function() { return handleError(function (arg0, arg1) {
        arg0.postMessage(arg1);
    }, arguments) };
    imports.wbg.__wbg_process_dc0fbacc7c1c06f7 = function(arg0) {
        const ret = arg0.process;
        return ret;
    };
    imports.wbg.__wbg_push_737cfc8c1432c2c6 = function(arg0, arg1) {
        const ret = arg0.push(arg1);
        return ret;
    };
    imports.wbg.__wbg_queueMicrotask_97d92b4fcc8a61c5 = function(arg0) {
        queueMicrotask(arg0);
    };
    imports.wbg.__wbg_queueMicrotask_d3219def82552485 = function(arg0) {
        const ret = arg0.queueMicrotask;
        return ret;
    };
    imports.wbg.__wbg_randomFillSync_ac0988aba3254290 = function() { return handleError(function (arg0, arg1) {
        arg0.randomFillSync(arg1);
    }, arguments) };
    imports.wbg.__wbg_random_3ad904d98382defe = function() {
        const ret = Math.random();
        return ret;
    };
    imports.wbg.__wbg_read_50be4c2d01bc12b4 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = arg0.read(arg1, arg2);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_read_a2434af1186cb56c = function(arg0) {
        const ret = arg0.read();
        return ret;
    };
    imports.wbg.__wbg_read_f8fdd4b410209222 = function() { return handleError(function (arg0, arg1, arg2, arg3) {
        const ret = arg0.read(getArrayU8FromWasm0(arg1, arg2), arg3);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_releaseLock_091899af97991d2e = function(arg0) {
        arg0.releaseLock();
    };
    imports.wbg.__wbg_remoteattachmentinfo_new = function(arg0) {
        const ret = RemoteAttachmentInfo.__wrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_remoteattachmentinfo_unwrap = function(arg0) {
        const ret = RemoteAttachmentInfo.__unwrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_removeEntry_9f6bc325e3383e59 = function(arg0, arg1, arg2) {
        const ret = arg0.removeEntry(getStringFromWasm0(arg1, arg2));
        return ret;
    };
    imports.wbg.__wbg_require_60cc747a6bc5215a = function() { return handleError(function () {
        const ret = module.require;
        return ret;
    }, arguments) };
    imports.wbg.__wbg_resolve_4851785c9c5f573d = function(arg0) {
        const ret = Promise.resolve(arg0);
        return ret;
    };
    imports.wbg.__wbg_respond_1f279fa9f8edcb1c = function() { return handleError(function (arg0, arg1) {
        arg0.respond(arg1 >>> 0);
    }, arguments) };
    imports.wbg.__wbg_setInterval_ed3b5e3c3ebb8a6d = function() { return handleError(function (arg0, arg1) {
        const ret = setInterval(arg0, arg1);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_setTimeout_2b339866a2aa3789 = function(arg0, arg1) {
        const ret = setTimeout(arg0, arg1);
        return ret;
    };
    imports.wbg.__wbg_setTimeout_8f06012fba12034e = function(arg0, arg1) {
        globalThis.setTimeout(arg0, arg1);
    };
    imports.wbg.__wbg_setTimeout_db2dbaeefb6f39c7 = function() { return handleError(function (arg0, arg1) {
        const ret = setTimeout(arg0, arg1);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_setUint32_ad8826b8caeaf63d = function(arg0, arg1, arg2) {
        arg0.setUint32(arg1 >>> 0, arg2 >>> 0);
    };
    imports.wbg.__wbg_set_37837023f3d740e8 = function(arg0, arg1, arg2) {
        arg0[arg1 >>> 0] = arg2;
    };
    imports.wbg.__wbg_set_3f1d0b984ed272ed = function(arg0, arg1, arg2) {
        arg0[arg1] = arg2;
    };
    imports.wbg.__wbg_set_65595bdd868b3009 = function(arg0, arg1, arg2) {
        arg0.set(arg1, arg2 >>> 0);
    };
    imports.wbg.__wbg_set_8fc6bf8a5b1071d1 = function(arg0, arg1, arg2) {
        const ret = arg0.set(arg1, arg2);
        return ret;
    };
    imports.wbg.__wbg_set_bb8cecf6a62b9f46 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = Reflect.set(arg0, arg1, arg2);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_setat_2a071a392643c10e = function(arg0, arg1) {
        arg0.at = arg1;
    };
    imports.wbg.__wbg_setbody_5923b78a95eedf29 = function(arg0, arg1) {
        arg0.body = arg1;
    };
    imports.wbg.__wbg_setcache_12f17c3a980650e4 = function(arg0, arg1) {
        arg0.cache = __wbindgen_enum_RequestCache[arg1];
    };
    imports.wbg.__wbg_setcreate_139bad94b2874fb5 = function(arg0, arg1) {
        arg0.create = arg1 !== 0;
    };
    imports.wbg.__wbg_setcreate_4ca762e23d9f78da = function(arg0, arg1) {
        arg0.create = arg1 !== 0;
    };
    imports.wbg.__wbg_setcredentials_c3a22f1cd105a2c6 = function(arg0, arg1) {
        arg0.credentials = __wbindgen_enum_RequestCredentials[arg1];
    };
    imports.wbg.__wbg_setheaders_834c0bdb6a8949ad = function(arg0, arg1) {
        arg0.headers = arg1;
    };
    imports.wbg.__wbg_sethighwatermark_793c99c89830c8e9 = function(arg0, arg1) {
        arg0.highWaterMark = arg1;
    };
    imports.wbg.__wbg_setmethod_3c5280fe5d890842 = function(arg0, arg1, arg2) {
        arg0.method = getStringFromWasm0(arg1, arg2);
    };
    imports.wbg.__wbg_setmode_5dc300b865044b65 = function(arg0, arg1) {
        arg0.mode = __wbindgen_enum_RequestMode[arg1];
    };
    imports.wbg.__wbg_setsignal_75b21ef3a81de905 = function(arg0, arg1) {
        arg0.signal = arg1;
    };
    imports.wbg.__wbg_signal_aaf9ad74119f20a4 = function(arg0) {
        const ret = arg0.signal;
        return ret;
    };
    imports.wbg.__wbg_signaturerequesthandle_new = function(arg0) {
        const ret = SignatureRequestHandle.__wrap(arg0);
        return ret;
    };
    imports.wbg.__wbg_size_f9d54556ad844dc3 = function(arg0) {
        const ret = arg0.size;
        return ret;
    };
    imports.wbg.__wbg_slice_972c243648c9fd2e = function(arg0, arg1, arg2) {
        const ret = arg0.slice(arg1 >>> 0, arg2 >>> 0);
        return ret;
    };
    imports.wbg.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {
        const ret = arg1.stack;
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
    };
    imports.wbg.__wbg_static_accessor_GLOBAL_88a902d13a557d07 = function() {
        const ret = typeof global === 'undefined' ? null : global;
        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
    };
    imports.wbg.__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0 = function() {
        const ret = typeof globalThis === 'undefined' ? null : globalThis;
        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
    };
    imports.wbg.__wbg_static_accessor_SELF_37c5d418e4bf5819 = function() {
        const ret = typeof self === 'undefined' ? null : self;
        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
    };
    imports.wbg.__wbg_static_accessor_WINDOW_5de37043a91a9c40 = function() {
        const ret = typeof window === 'undefined' ? null : window;
        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
    };
    imports.wbg.__wbg_status_f6360336ca686bf0 = function(arg0) {
        const ret = arg0.status;
        return ret;
    };
    imports.wbg.__wbg_storage_07eb754b88898955 = function(arg0) {
        const ret = arg0.storage;
        return ret;
    };
    imports.wbg.__wbg_stringify_f7ed6987935b4a24 = function() { return handleError(function (arg0) {
        const ret = JSON.stringify(arg0);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_subarray_aa9065fa9dc5df96 = function(arg0, arg1, arg2) {
        const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);
        return ret;
    };
    imports.wbg.__wbg_text_7805bea50de2af49 = function() { return handleError(function (arg0) {
        const ret = arg0.text();
        return ret;
    }, arguments) };
    imports.wbg.__wbg_then_44b73946d2fb3e7d = function(arg0, arg1) {
        const ret = arg0.then(arg1);
        return ret;
    };
    imports.wbg.__wbg_then_48b406749878a531 = function(arg0, arg1, arg2) {
        const ret = arg0.then(arg1, arg2);
        return ret;
    };
    imports.wbg.__wbg_toString_ba82658ec370add0 = function() { return handleError(function (arg0, arg1) {
        const ret = arg0.toString(arg1);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_toU8Array_7fa7fb3ae8554ad0 = function(arg0, arg1, arg2, arg3) {
        JSArrayBufferCopy.toU8Array(arg0, arg1 >>> 0, arg2 >>> 0, arg3);
    };
    imports.wbg.__wbg_toU8Slice_11519abfa5176ae4 = function(arg0, arg1, arg2, arg3) {
        JSArrayBufferCopy.toU8Slice(arg0, arg1, arg2 >>> 0, arg3 >>> 0);
    };
    imports.wbg.__wbg_truncate_29261a6365c72b01 = function() { return handleError(function (arg0, arg1) {
        arg0.truncate(arg1 >>> 0);
    }, arguments) };
    imports.wbg.__wbg_truncate_4e1b09a0538f4ac4 = function() { return handleError(function (arg0, arg1) {
        arg0.truncate(arg1);
    }, arguments) };
    imports.wbg.__wbg_url_ae10c34ca209681d = function(arg0, arg1) {
        const ret = arg1.url;
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
    };
    imports.wbg.__wbg_value_cd1ffa7b1ab794f1 = function(arg0) {
        const ret = arg0.value;
        return ret;
    };
    imports.wbg.__wbg_versions_c01dfd4722a88165 = function(arg0) {
        const ret = arg0.versions;
        return ret;
    };
    imports.wbg.__wbg_view_fd8a56e8983f448d = function(arg0) {
        const ret = arg0.view;
        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);
    };
    imports.wbg.__wbg_warn_4ca3906c248c47c4 = function(arg0) {
        console.warn(arg0);
    };
    imports.wbg.__wbg_warn_aaf1f4664a035bd6 = function(arg0, arg1, arg2, arg3) {
        console.warn(arg0, arg1, arg2, arg3);
    };
    imports.wbg.__wbg_write_530d3c84df874f53 = function() { return handleError(function (arg0, arg1, arg2, arg3) {
        const ret = arg0.write(getArrayU8FromWasm0(arg1, arg2), arg3);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_write_df271225cf2c4e20 = function() { return handleError(function (arg0, arg1, arg2) {
        const ret = arg0.write(arg1, arg2);
        return ret;
    }, arguments) };
    imports.wbg.__wbindgen_array_new = function() {
        const ret = [];
        return ret;
    };
    imports.wbg.__wbindgen_array_push = function(arg0, arg1) {
        arg0.push(arg1);
    };
    imports.wbg.__wbindgen_bigint_from_i64 = function(arg0) {
        const ret = arg0;
        return ret;
    };
    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {
        const ret = BigInt.asUintN(64, arg0);
        return ret;
    };
    imports.wbg.__wbindgen_boolean_get = function(arg0) {
        const v = arg0;
        const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;
        return ret;
    };
    imports.wbg.__wbindgen_cb_drop = function(arg0) {
        const obj = arg0.original;
        if (obj.cnt-- == 1) {
            obj.a = 0;
            return true;
        }
        const ret = false;
        return ret;
    };
    imports.wbg.__wbindgen_closure_wrapper20273 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 4907, __wbg_adapter_50);
        return ret;
    };
    imports.wbg.__wbindgen_closure_wrapper22394 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 5181, __wbg_adapter_53);
        return ret;
    };
    imports.wbg.__wbindgen_closure_wrapper23049 = function(arg0, arg1, arg2) {
        const ret = makeMutClosure(arg0, arg1, 5205, __wbg_adapter_56);
        return ret;
    };
    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {
        const ret = debugString(arg1);
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
    };
    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {
        const ret = new Error(getStringFromWasm0(arg0, arg1));
        return ret;
    };
    imports.wbg.__wbindgen_in = function(arg0, arg1) {
        const ret = arg0 in arg1;
        return ret;
    };
    imports.wbg.__wbindgen_init_externref_table = function() {
        const table = wasm.__wbindgen_export_4;
        const offset = table.grow(4);
        table.set(0, undefined);
        table.set(offset + 0, undefined);
        table.set(offset + 1, null);
        table.set(offset + 2, true);
        table.set(offset + 3, false);
        ;
    };
    imports.wbg.__wbindgen_is_function = function(arg0) {
        const ret = typeof(arg0) === 'function';
        return ret;
    };
    imports.wbg.__wbindgen_is_object = function(arg0) {
        const val = arg0;
        const ret = typeof(val) === 'object' && val !== null;
        return ret;
    };
    imports.wbg.__wbindgen_is_string = function(arg0) {
        const ret = typeof(arg0) === 'string';
        return ret;
    };
    imports.wbg.__wbindgen_is_undefined = function(arg0) {
        const ret = arg0 === undefined;
        return ret;
    };
    imports.wbg.__wbindgen_jsval_loose_eq = function(arg0, arg1) {
        const ret = arg0 == arg1;
        return ret;
    };
    imports.wbg.__wbindgen_memory = function() {
        const ret = wasm.memory;
        return ret;
    };
    imports.wbg.__wbindgen_number_get = function(arg0, arg1) {
        const obj = arg1;
        const ret = typeof(obj) === 'number' ? obj : undefined;
        getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);
        getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);
    };
    imports.wbg.__wbindgen_number_new = function(arg0) {
        const ret = arg0;
        return ret;
    };
    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {
        const obj = arg1;
        const ret = typeof(obj) === 'string' ? obj : undefined;
        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
    };
    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
        const ret = getStringFromWasm0(arg0, arg1);
        return ret;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
        throw new Error(getStringFromWasm0(arg0, arg1));
    };
    imports.wbg.__wbindgen_try_into_number = function(arg0) {
        let result;
        try { result = +arg0 } catch (e) { result = e }
        const ret = result;
        return ret;
    };

    return imports;
}

function __wbg_init_memory(imports, memory) {

}

function __wbg_finalize_init(instance, module) {
    wasm = instance.exports;
    __wbg_init.__wbindgen_wasm_module = module;
    cachedDataViewMemory0 = null;
    cachedUint8ArrayMemory0 = null;


    wasm.__wbindgen_start();
    return wasm;
}

function initSync(module) {
    if (wasm !== undefined) return wasm;


    if (typeof module !== 'undefined') {
        if (Object.getPrototypeOf(module) === Object.prototype) {
            ({module} = module)
        } else {
            console.warn('using deprecated parameters for `initSync()`; pass a single object instead')
        }
    }

    const imports = __wbg_get_imports();

    __wbg_init_memory(imports);

    if (!(module instanceof WebAssembly.Module)) {
        module = new WebAssembly.Module(module);
    }

    const instance = new WebAssembly.Instance(module, imports);

    return __wbg_finalize_init(instance, module);
}

async function __wbg_init(module_or_path) {
    if (wasm !== undefined) return wasm;


    if (typeof module_or_path !== 'undefined') {
        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {
            ({module_or_path} = module_or_path)
        } else {
            console.warn('using deprecated parameters for the initialization function; pass a single object instead')
        }
    }

    if (typeof module_or_path === 'undefined') {
        module_or_path = new URL('bindings_wasm_bg.wasm', import.meta.url);
    }
    const imports = __wbg_get_imports();

    if (typeof module_or_path === 'string' || (typeof Request === 'function' && module_or_path instanceof Request) || (typeof URL === 'function' && module_or_path instanceof URL)) {
        module_or_path = fetch(module_or_path);
    }

    __wbg_init_memory(imports);

    const { instance, module } = await __wbg_load(await module_or_path, imports);

    return __wbg_finalize_init(instance, module);
}

export { initSync };
export default __wbg_init;
