/* tslint:disable */
/* eslint-disable */
export function getInboxIdForIdentifier(host: string, accountIdentifier: Identifier): Promise<string | undefined>;
export function generateInboxId(accountIdentifier: Identifier): string;
export function createClient(host: string, inbox_id: string, account_identifier: Identifier, db_path?: string | null, encryption_key?: Uint8Array | null, device_sync_server_url?: string | null, device_sync_worker_mode?: DeviceSyncWorkerMode | null, log_options?: LogOptions | null, allow_offline?: boolean | null, disable_events?: boolean | null, app_version?: string | null): Promise<Client>;
export function encodeMultiRemoteAttachment(multiRemoteAttachment: MultiRemoteAttachment): Uint8Array;
export function decodeMultiRemoteAttachment(bytes: Uint8Array): MultiRemoteAttachment;
export function encodeReaction(reaction: Reaction): Uint8Array;
export function decodeReaction(bytes: Uint8Array): Reaction;
export function inboxStateFromInboxIds(host: string, inbox_ids: string[]): Promise<InboxState[]>;
export function verifySignedWithPublicKey(signature_text: string, signature_bytes: Uint8Array, public_key: Uint8Array): void;
export function revokeInstallationsSignatureRequest(host: string, recovery_identifier: Identifier, inbox_id: string, installation_ids: Uint8Array[]): Promise<SignatureRequestHandle>;
export function applySignatureRequest(host: string, signature_request: SignatureRequestHandle): Promise<void>;
/**
 * Entry point invoked by JavaScript in a worker.
 */
export function task_worker_entry_point(ptr: number): void;
export enum ConsentEntityType {
  GroupId = 0,
  InboxId = 1,
}
export enum ConsentState {
  Unknown = 0,
  Allowed = 1,
  Denied = 2,
}
export enum ContentType {
  Unknown = 0,
  Text = 1,
  GroupMembershipChange = 2,
  GroupUpdated = 3,
  Reaction = 4,
  ReadReceipt = 5,
  Reply = 6,
  Attachment = 7,
  RemoteAttachment = 8,
  TransactionReference = 9,
}
export enum ConversationType {
  Dm = 0,
  Group = 1,
  Sync = 2,
}
export enum DeliveryStatus {
  Unpublished = 0,
  Published = 1,
  Failed = 2,
}
export enum GroupMembershipState {
  Allowed = 0,
  Rejected = 1,
  Pending = 2,
  Restored = 3,
}
export enum GroupMessageKind {
  Application = 0,
  MembershipChange = 1,
}
export enum GroupPermissionsOptions {
  Default = 0,
  AdminOnly = 1,
  CustomPolicy = 2,
}
export enum MetadataField {
  GroupName = 0,
  Description = 1,
  ImageUrlSquare = 2,
  MessageExpirationFromMS = 3,
  MessageExpirationMS = 4,
}
export enum PermissionLevel {
  Member = 0,
  Admin = 1,
  SuperAdmin = 2,
}
export enum PermissionPolicy {
  Allow = 0,
  Deny = 1,
  Admin = 2,
  SuperAdmin = 3,
  DoesNotExist = 4,
  Other = 5,
}
export enum PermissionUpdateType {
  AddMember = 0,
  RemoveMember = 1,
  AddAdmin = 2,
  RemoveAdmin = 3,
  UpdateMetadata = 4,
}
export enum ReactionAction {
  Unknown = 0,
  Added = 1,
  Removed = 2,
}
export enum ReactionSchema {
  Unknown = 0,
  Unicode = 1,
  Shortcode = 2,
  Custom = 3,
}
export enum SortDirection {
  Ascending = 0,
  Descending = 1,
}
type DeviceSyncWorkerMode = "enabled" | "disabled";
type LogLevel = "off" | "error" | "warn" | "info" | "debug" | "trace";
/**
 * The `ReadableStreamType` enum.
 *
 * *This API requires the following crate features to be activated: `ReadableStreamType`*
 */
type ReadableStreamType = "bytes";
export interface Identifier {
    identifier: string;
    identifierKind: IdentifierKind;
}

export type IdentifierKind = "Ethereum" | "Passkey";

export type UserPreference = { type: "Consent"; consent: Consent } | { type: "HmacKeyUpdate"; key: number[] };

export class ApiStats {
  private constructor();
  free(): void;
  upload_key_package: bigint;
  fetch_key_package: bigint;
  send_group_messages: bigint;
  send_welcome_messages: bigint;
  query_group_messages: bigint;
  query_welcome_messages: bigint;
  subscribe_messages: bigint;
  subscribe_welcomes: bigint;
}
export class Client {
  private constructor();
  free(): void;
  /**
   * Output booleans should be zipped with the index of input identifiers
   */
  canMessage(account_identifiers: Identifier[]): Promise<any>;
  sendSyncRequest(): Promise<void>;
  findInboxIdByIdentifier(identifier: Identifier): Promise<string | undefined>;
  inboxStateFromInboxIds(inbox_ids: string[], refresh_from_network: boolean): Promise<InboxState[]>;
  conversations(): Conversations;
  syncPreferences(): Promise<number>;
  apiStatistics(): ApiStats;
  apiIdentityStatistics(): IdentityStats;
  apiAggregateStatistics(): string;
  clearAllStatistics(): void;
  uploadDebugArchive(server_url: string): Promise<string>;
  setConsentStates(records: Consent[]): Promise<void>;
  getConsentState(entity_type: ConsentEntityType, entity: string): Promise<ConsentState>;
  /**
   *
   *   * Get the client's inbox state.
   *   *
   *   * If `refresh_from_network` is true, the client will go to the network first to refresh the state.
   *   * Otherwise, the state will be read from the local database.
   *   
   */
  inboxState(refresh_from_network: boolean): Promise<InboxState>;
  getLatestInboxState(inbox_id: string): Promise<InboxState>;
  /**
   *
   *   * Get key package statuses for a list of installation IDs.
   *   *
   *   * Returns a JavaScript object mapping installation ID strings to KeyPackageStatus objects.
   *   
   */
  getKeyPackageStatusesForInstallationIds(installation_ids: string[]): Promise<any>;
  createInboxSignatureRequest(): SignatureRequestHandle | undefined;
  addWalletSignatureRequest(new_identifier: Identifier): Promise<SignatureRequestHandle>;
  revokeWalletSignatureRequest(identifier: Identifier): Promise<SignatureRequestHandle>;
  revokeAllOtherInstallationsSignatureRequest(): Promise<SignatureRequestHandle>;
  revokeInstallationsSignatureRequest(installation_ids: Uint8Array[]): Promise<SignatureRequestHandle>;
  changeRecoveryIdentifierSignatureRequest(new_recovery_identifier: Identifier): Promise<SignatureRequestHandle>;
  applySignatureRequest(signature_request: SignatureRequestHandle): Promise<void>;
  registerIdentity(signature_request: SignatureRequestHandle): Promise<void>;
  signWithInstallationKey(signature_text: string): Uint8Array;
  verifySignedWithInstallationKey(signature_text: string, signature_bytes: Uint8Array): void;
  readonly accountIdentifier: Identifier;
  readonly inboxId: string;
  readonly isRegistered: boolean;
  readonly installationId: string;
  readonly installationIdBytes: Uint8Array;
  readonly appVersion: string;
  readonly libxmtpVersion: string;
}
export class Consent {
  free(): void;
  constructor(entity_type: ConsentEntityType, state: ConsentState, entity: string);
  entityType: ConsentEntityType;
  state: ConsentState;
  entity: string;
}
export class ContentTypeId {
  free(): void;
  constructor(authority_id: string, type_id: string, version_major: number, version_minor: number);
  authorityId: string;
  typeId: string;
  versionMajor: number;
  versionMinor: number;
}
export class Conversation {
  private constructor();
  free(): void;
  consentState(): ConsentState;
  updateConsentState(state: ConsentState): void;
  id(): string;
  send(encoded_content: EncodedContent): Promise<string>;
  /**
   * send a message without immediately publishing to the delivery service.
   */
  sendOptimistic(encoded_content: EncodedContent): string;
  /**
   * Publish all unpublished messages
   */
  publishMessages(): Promise<void>;
  sync(): Promise<void>;
  findMessages(opts?: ListMessagesOptions | null): Promise<Message[]>;
  findMessagesWithReactions(opts?: ListMessagesOptions | null): Promise<MessageWithReactions[]>;
  listMembers(): Promise<any>;
  adminList(): string[];
  superAdminList(): string[];
  isAdmin(inbox_id: string): boolean;
  isSuperAdmin(inbox_id: string): boolean;
  addMembers(account_identifiers: Identifier[]): Promise<void>;
  addAdmin(inbox_id: string): Promise<void>;
  removeAdmin(inbox_id: string): Promise<void>;
  addSuperAdmin(inbox_id: string): Promise<void>;
  removeSuperAdmin(inbox_id: string): Promise<void>;
  groupPermissions(): GroupPermissions;
  addMembersByInboxId(inbox_ids: string[]): Promise<void>;
  removeMembers(account_identifiers: Identifier[]): Promise<void>;
  removeMembersByInboxId(inbox_ids: string[]): Promise<void>;
  updateGroupName(group_name: string): Promise<void>;
  groupName(): string;
  updateGroupImageUrlSquare(group_image_url_square: string): Promise<void>;
  groupImageUrlSquare(): string;
  updateGroupDescription(group_description: string): Promise<void>;
  groupDescription(): string;
  stream(callback: any): StreamCloser;
  createdAtNs(): bigint;
  isActive(): boolean;
  pausedForVersion(): string | undefined;
  addedByInboxId(): string;
  groupMetadata(): Promise<GroupMetadata>;
  dmPeerInboxId(): string;
  updatePermissionPolicy(permission_update_type: PermissionUpdateType, permission_policy_option: PermissionPolicy, metadata_field?: MetadataField | null): Promise<void>;
  updateMessageDisappearingSettings(settings: MessageDisappearingSettings): Promise<void>;
  removeMessageDisappearingSettings(): Promise<void>;
  messageDisappearingSettings(): MessageDisappearingSettings | undefined;
  isMessageDisappearingEnabled(): boolean;
  getHmacKeys(): any;
  getDebugInfo(): Promise<any>;
  findDuplicateDms(): Promise<Conversation[]>;
}
export class ConversationDebugInfo {
  private constructor();
  free(): void;
  epoch: bigint;
  maybeForked: boolean;
  forkDetails: string;
  get isCommitLogForked(): boolean | undefined;
  set isCommitLogForked(value: boolean | null | undefined);
  localCommitLog: string;
  remoteCommitLog: string;
  cursor: bigint;
}
export class ConversationListItem {
  free(): void;
  constructor(conversation: Conversation, last_message?: Message | null, is_commit_log_forked?: boolean | null);
  conversation: Conversation;
  get lastMessage(): Message | undefined;
  set lastMessage(value: Message | null | undefined);
  get isCommitLogForked(): boolean | undefined;
  set isCommitLogForked(value: boolean | null | undefined);
}
export class Conversations {
  private constructor();
  free(): void;
  createGroupOptimistic(options?: CreateGroupOptions | null): Conversation;
  createGroup(account_identifiers: Identifier[], options?: CreateGroupOptions | null): Promise<Conversation>;
  createGroupByInboxIds(inbox_ids: string[], options?: CreateGroupOptions | null): Promise<Conversation>;
  createDm(account_identifier: Identifier, options?: CreateDMOptions | null): Promise<Conversation>;
  createDmByInboxId(inbox_id: string, options?: CreateDMOptions | null): Promise<Conversation>;
  findGroupById(group_id: string): Conversation;
  findDmByTargetInboxId(target_inbox_id: string): Conversation;
  findMessageById(message_id: string): Message;
  sync(): Promise<void>;
  syncAllConversations(consent_states?: any[] | null): Promise<number>;
  list(opts?: ListConversationsOptions | null): Array<any>;
  getHmacKeys(): any;
  /**
   * Returns a 'ReadableStream' of Conversations
   */
  streamLocal(conversation_type?: ConversationType | null): Promise<ReadableStream>;
  stream(callback: any, conversation_type?: ConversationType | null): StreamCloser;
  streamAllMessages(callback: any, conversation_type?: ConversationType | null, consent_states?: any[] | null): StreamCloser;
  streamConsent(callback: any): StreamCloser;
  streamPreferences(callback: any): StreamCloser;
}
export class CreateDMOptions {
  free(): void;
  constructor(message_disappearing_settings?: MessageDisappearingSettings | null);
  get messageDisappearingSettings(): MessageDisappearingSettings | undefined;
  set messageDisappearingSettings(value: MessageDisappearingSettings | null | undefined);
}
export class CreateGroupOptions {
  free(): void;
  constructor(permissions?: GroupPermissionsOptions | null, group_name?: string | null, group_image_url_square?: string | null, group_description?: string | null, custom_permission_policy_set?: PermissionPolicySet | null, message_disappearing_settings?: MessageDisappearingSettings | null);
  get permissions(): GroupPermissionsOptions | undefined;
  set permissions(value: GroupPermissionsOptions | null | undefined);
  get groupName(): string | undefined;
  set groupName(value: string | null | undefined);
  get groupImageUrlSquare(): string | undefined;
  set groupImageUrlSquare(value: string | null | undefined);
  get groupDescription(): string | undefined;
  set groupDescription(value: string | null | undefined);
  get customPermissionPolicySet(): PermissionPolicySet | undefined;
  set customPermissionPolicySet(value: PermissionPolicySet | null | undefined);
  get messageDisappearingSettings(): MessageDisappearingSettings | undefined;
  set messageDisappearingSettings(value: MessageDisappearingSettings | null | undefined);
}
export class EncodedContent {
  free(): void;
  constructor(type: ContentTypeId | null | undefined, parameters: any, fallback: string | null | undefined, compression: number | null | undefined, content: Uint8Array);
  get type(): ContentTypeId | undefined;
  set type(value: ContentTypeId | null | undefined);
  parameters: any;
  get fallback(): string | undefined;
  set fallback(value: string | null | undefined);
  get compression(): number | undefined;
  set compression(value: number | null | undefined);
  content: Uint8Array;
}
export class GroupMember {
  free(): void;
  constructor(inboxId: string, accountIdentifiers: Identifier[], installationIds: string[], permissionLevel: PermissionLevel, consentState: ConsentState);
  inboxId: string;
  accountIdentifiers: Identifier[];
  installationIds: string[];
  permissionLevel: PermissionLevel;
  consentState: ConsentState;
}
export class GroupMetadata {
  private constructor();
  free(): void;
  creatorInboxId(): string;
  conversationType(): string;
}
export class GroupPermissions {
  private constructor();
  free(): void;
  policyType(): GroupPermissionsOptions;
  policySet(): PermissionPolicySet;
}
export class HmacKey {
  private constructor();
  free(): void;
  key: Uint8Array;
  epoch: bigint;
}
export class IdentityStats {
  private constructor();
  free(): void;
  publish_identity_update: bigint;
  get_identity_updates_v2: bigint;
  get_inbox_ids: bigint;
  verify_smart_contract_wallet_signature: bigint;
}
export class InboxState {
  free(): void;
  constructor(inbox_id: string, recovery_identifier: Identifier, installations: Installation[], account_identifiers: Identifier[]);
  inboxId: string;
  recoveryIdentifier: Identifier;
  installations: Installation[];
  accountIdentifiers: Identifier[];
}
export class Installation {
  free(): void;
  constructor(bytes: Uint8Array, id: string, client_timestamp_ns?: bigint | null);
  bytes: Uint8Array;
  id: string;
  get clientTimestampNs(): bigint | undefined;
  set clientTimestampNs(value: bigint | null | undefined);
}
export class IntoUnderlyingByteSource {
  private constructor();
  free(): void;
  start(controller: ReadableByteStreamController): void;
  pull(controller: ReadableByteStreamController): Promise<any>;
  cancel(): void;
  readonly type: ReadableStreamType;
  readonly autoAllocateChunkSize: number;
}
export class IntoUnderlyingSink {
  private constructor();
  free(): void;
  write(chunk: any): Promise<any>;
  close(): Promise<any>;
  abort(reason: any): Promise<any>;
}
export class IntoUnderlyingSource {
  private constructor();
  free(): void;
  pull(controller: ReadableStreamDefaultController): Promise<any>;
  cancel(): void;
}
export class KeyPackageStatus {
  private constructor();
  free(): void;
  get lifetime(): Lifetime | undefined;
  set lifetime(value: Lifetime | null | undefined);
  get validationError(): string | undefined;
  set validationError(value: string | null | undefined);
}
export class Lifetime {
  private constructor();
  free(): void;
  not_before: bigint;
  not_after: bigint;
}
export class ListConversationsOptions {
  free(): void;
  constructor(consent_states?: any[] | null, conversation_type?: ConversationType | null, created_after_ns?: bigint | null, created_before_ns?: bigint | null, include_duplicate_dms?: boolean | null, limit?: bigint | null);
  get consentStates(): any[] | undefined;
  set consentStates(value: any[] | null | undefined);
  get conversationType(): ConversationType | undefined;
  set conversationType(value: ConversationType | null | undefined);
  get createdAfterNs(): bigint | undefined;
  set createdAfterNs(value: bigint | null | undefined);
  get createdBeforeNs(): bigint | undefined;
  set createdBeforeNs(value: bigint | null | undefined);
  get includeDuplicateDms(): boolean | undefined;
  set includeDuplicateDms(value: boolean | null | undefined);
  get limit(): bigint | undefined;
  set limit(value: bigint | null | undefined);
}
export class ListMessagesOptions {
  free(): void;
  constructor(sent_before_ns?: bigint | null, sent_after_ns?: bigint | null, limit?: bigint | null, delivery_status?: DeliveryStatus | null, direction?: SortDirection | null, content_types?: any[] | null, kind?: GroupMessageKind | null);
  get contentTypes(): any[] | undefined;
  set contentTypes(value: any[] | null | undefined);
  get sentBeforeNs(): bigint | undefined;
  set sentBeforeNs(value: bigint | null | undefined);
  get sentAfterNs(): bigint | undefined;
  set sentAfterNs(value: bigint | null | undefined);
  get limit(): bigint | undefined;
  set limit(value: bigint | null | undefined);
  get deliveryStatus(): DeliveryStatus | undefined;
  set deliveryStatus(value: DeliveryStatus | null | undefined);
  get direction(): SortDirection | undefined;
  set direction(value: SortDirection | null | undefined);
  get kind(): GroupMessageKind | undefined;
  set kind(value: GroupMessageKind | null | undefined);
}
/**
 * Specify options for the logger
 */
export class LogOptions {
  free(): void;
  constructor(structured: boolean, performance: boolean, level?: LogLevel | null);
  /**
   * enable structured JSON logging to stdout.Useful for third-party log viewers
   */
  structured: boolean;
  /**
   * enable performance metrics for libxmtp in the `performance` tab
   */
  performance: boolean;
  /**
   * filter for logs
   */
  get level(): LogLevel | undefined;
  /**
   * filter for logs
   */
  set level(value: LogLevel | null | undefined);
}
export class Message {
  free(): void;
  constructor(id: string, sent_at_ns: bigint, convo_id: string, sender_inbox_id: string, content: EncodedContent, kind: GroupMessageKind, delivery_status: DeliveryStatus);
  id: string;
  sentAtNs: bigint;
  convoId: string;
  senderInboxId: string;
  content: EncodedContent;
  kind: GroupMessageKind;
  deliveryStatus: DeliveryStatus;
}
export class MessageDisappearingSettings {
  free(): void;
  constructor(from_ns: bigint, in_ns: bigint);
  fromNs: bigint;
  inNs: bigint;
}
export class MessageWithReactions {
  private constructor();
  free(): void;
  message: Message;
  reactions: Message[];
}
export class MultiRemoteAttachment {
  free(): void;
  constructor(attachments: RemoteAttachmentInfo[]);
  attachments: RemoteAttachmentInfo[];
}
export class Opfs {
  private constructor();
  free(): void;
  static init_sqlite_opfs(): Promise<void>;
  /**
   * Check if the global OPFS object has been initialized
   */
  static exists(): boolean;
  /**
   * gets the error from Opfs, if any.
   */
  static error(): string | undefined;
  static wipeFiles(): Promise<void>;
  /**
   * If a virtual file exists with the given name, disassociates it from the pool and returns true, else returns false without side effects.
   */
  static rm(name: string): boolean;
  /**
   * list files in current pool
   */
  static getFileNames(): string[];
  /**
   * import a db file at 'path'
   */
  static importDb(path: string, bytes: Uint8Array): void;
  /**
   * export db file with 'name'
   */
  static exportFile(name: string): Uint8Array;
  /**
   * get number of files in pool
   */
  static getFileCount(): number;
  static getCapacity(): number;
  /**
   * Adds n entries to the current pool.
   */
  static addCapacity(n: number): Promise<number>;
  /**
   * Removes up to n entries from the pool, with the caveat that it can only remove currently-unused entries.
   */
  static reduceCapacity(n: number): Promise<number>;
}
export class PasskeySignature {
  private constructor();
  free(): void;
}
export class PermissionPolicySet {
  free(): void;
  constructor(add_member_policy: PermissionPolicy, remove_member_policy: PermissionPolicy, add_admin_policy: PermissionPolicy, remove_admin_policy: PermissionPolicy, update_group_name_policy: PermissionPolicy, update_group_description_policy: PermissionPolicy, update_group_image_url_square_policy: PermissionPolicy, update_message_disappearing_policy: PermissionPolicy);
  addMemberPolicy: PermissionPolicy;
  removeMemberPolicy: PermissionPolicy;
  addAdminPolicy: PermissionPolicy;
  removeAdminPolicy: PermissionPolicy;
  updateGroupNamePolicy: PermissionPolicy;
  updateGroupDescriptionPolicy: PermissionPolicy;
  updateGroupImageUrlSquarePolicy: PermissionPolicy;
  updateMessageDisappearingPolicy: PermissionPolicy;
}
export class Reaction {
  free(): void;
  constructor(reference: string, referenceInboxId: string, action: ReactionAction, content: string, schema: ReactionSchema);
  reference: string;
  referenceInboxId: string;
  action: ReactionAction;
  content: string;
  schema: ReactionSchema;
}
export class RemoteAttachmentInfo {
  free(): void;
  constructor(secret: Uint8Array, contentDigest: string, nonce: Uint8Array, scheme: string, url: string, salt: Uint8Array, contentLength?: number | null, filename?: string | null);
  secret: Uint8Array;
  contentDigest: string;
  nonce: Uint8Array;
  scheme: string;
  url: string;
  salt: Uint8Array;
  get contentLength(): number | undefined;
  set contentLength(value: number | null | undefined);
  get filename(): string | undefined;
  set filename(value: string | null | undefined);
}
export class SignatureRequestHandle {
  private constructor();
  free(): void;
  signatureText(): Promise<string>;
  addEcdsaSignature(signature_bytes: Uint8Array): Promise<void>;
  addPasskeySignature(signature: PasskeySignature): Promise<void>;
  addScwSignature(account_identifier: Identifier, signature_bytes: Uint8Array, chain_id: bigint, block_number?: bigint | null): Promise<void>;
}
export class StreamCloser {
  private constructor();
  free(): void;
  /**
   * Signal the stream to end
   * Does not wait for the stream to end.
   */
  end(): void;
  /**
   * End the stream and `await` for it to shutdown
   * Returns the `Result` of the task.
   * End the stream and asynchronously wait for it to shutdown
   */
  endAndWait(): Promise<void>;
  waitForReady(): Promise<void>;
  /**
   * Checks if this stream is closed
   */
  isClosed(): boolean;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_listconversationsoptions_free: (a: number, b: number) => void;
  readonly __wbg_get_listconversationsoptions_consentStates: (a: number) => [number, number];
  readonly __wbg_set_listconversationsoptions_consentStates: (a: number, b: number, c: number) => void;
  readonly __wbg_get_listconversationsoptions_conversationType: (a: number) => number;
  readonly __wbg_set_listconversationsoptions_conversationType: (a: number, b: number) => void;
  readonly __wbg_get_listconversationsoptions_createdAfterNs: (a: number) => [number, bigint];
  readonly __wbg_set_listconversationsoptions_createdAfterNs: (a: number, b: number, c: bigint) => void;
  readonly __wbg_get_listconversationsoptions_createdBeforeNs: (a: number) => [number, bigint];
  readonly __wbg_set_listconversationsoptions_createdBeforeNs: (a: number, b: number, c: bigint) => void;
  readonly __wbg_get_listconversationsoptions_includeDuplicateDms: (a: number) => number;
  readonly __wbg_set_listconversationsoptions_includeDuplicateDms: (a: number, b: number) => void;
  readonly __wbg_get_listconversationsoptions_limit: (a: number) => [number, bigint];
  readonly __wbg_set_listconversationsoptions_limit: (a: number, b: number, c: bigint) => void;
  readonly listconversationsoptions_new: (a: number, b: number, c: number, d: number, e: bigint, f: number, g: bigint, h: number, i: number, j: bigint) => number;
  readonly __wbg_messagedisappearingsettings_free: (a: number, b: number) => void;
  readonly messagedisappearingsettings_new: (a: bigint, b: bigint) => number;
  readonly __wbg_conversationdebuginfo_free: (a: number, b: number) => void;
  readonly __wbg_get_conversationdebuginfo_epoch: (a: number) => bigint;
  readonly __wbg_set_conversationdebuginfo_epoch: (a: number, b: bigint) => void;
  readonly __wbg_get_conversationdebuginfo_maybeForked: (a: number) => number;
  readonly __wbg_set_conversationdebuginfo_maybeForked: (a: number, b: number) => void;
  readonly __wbg_get_conversationdebuginfo_forkDetails: (a: number) => [number, number];
  readonly __wbg_set_conversationdebuginfo_forkDetails: (a: number, b: number, c: number) => void;
  readonly __wbg_get_conversationdebuginfo_isCommitLogForked: (a: number) => number;
  readonly __wbg_set_conversationdebuginfo_isCommitLogForked: (a: number, b: number) => void;
  readonly __wbg_get_conversationdebuginfo_localCommitLog: (a: number) => [number, number];
  readonly __wbg_set_conversationdebuginfo_localCommitLog: (a: number, b: number, c: number) => void;
  readonly __wbg_get_conversationdebuginfo_remoteCommitLog: (a: number) => [number, number];
  readonly __wbg_set_conversationdebuginfo_remoteCommitLog: (a: number, b: number, c: number) => void;
  readonly __wbg_get_conversationdebuginfo_cursor: (a: number) => bigint;
  readonly __wbg_set_conversationdebuginfo_cursor: (a: number, b: bigint) => void;
  readonly __wbg_creategroupoptions_free: (a: number, b: number) => void;
  readonly __wbg_get_creategroupoptions_permissions: (a: number) => number;
  readonly __wbg_set_creategroupoptions_permissions: (a: number, b: number) => void;
  readonly __wbg_get_creategroupoptions_groupName: (a: number) => [number, number];
  readonly __wbg_set_creategroupoptions_groupName: (a: number, b: number, c: number) => void;
  readonly __wbg_get_creategroupoptions_groupImageUrlSquare: (a: number) => [number, number];
  readonly __wbg_set_creategroupoptions_groupImageUrlSquare: (a: number, b: number, c: number) => void;
  readonly __wbg_get_creategroupoptions_groupDescription: (a: number) => [number, number];
  readonly __wbg_set_creategroupoptions_groupDescription: (a: number, b: number, c: number) => void;
  readonly __wbg_get_creategroupoptions_customPermissionPolicySet: (a: number) => number;
  readonly __wbg_set_creategroupoptions_customPermissionPolicySet: (a: number, b: number) => void;
  readonly creategroupoptions_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => number;
  readonly __wbg_createdmoptions_free: (a: number, b: number) => void;
  readonly __wbg_get_createdmoptions_messageDisappearingSettings: (a: number) => number;
  readonly __wbg_set_createdmoptions_messageDisappearingSettings: (a: number, b: number) => void;
  readonly createdmoptions_new: (a: number) => number;
  readonly __wbg_hmackey_free: (a: number, b: number) => void;
  readonly __wbg_get_hmackey_key: (a: number) => [number, number];
  readonly __wbg_set_hmackey_key: (a: number, b: number, c: number) => void;
  readonly __wbg_conversationlistitem_free: (a: number, b: number) => void;
  readonly __wbg_get_conversationlistitem_conversation: (a: number) => number;
  readonly __wbg_set_conversationlistitem_conversation: (a: number, b: number) => void;
  readonly __wbg_get_conversationlistitem_lastMessage: (a: number) => number;
  readonly __wbg_set_conversationlistitem_lastMessage: (a: number, b: number) => void;
  readonly __wbg_get_conversationlistitem_isCommitLogForked: (a: number) => number;
  readonly __wbg_set_conversationlistitem_isCommitLogForked: (a: number, b: number) => void;
  readonly conversationlistitem_new: (a: number, b: number, c: number) => number;
  readonly __wbg_conversations_free: (a: number, b: number) => void;
  readonly conversations_createGroupOptimistic: (a: number, b: number) => [number, number, number];
  readonly conversations_createGroup: (a: number, b: number, c: number, d: number) => any;
  readonly conversations_createGroupByInboxIds: (a: number, b: number, c: number, d: number) => any;
  readonly conversations_createDm: (a: number, b: any, c: number) => any;
  readonly conversations_createDmByInboxId: (a: number, b: number, c: number, d: number) => any;
  readonly conversations_findGroupById: (a: number, b: number, c: number) => [number, number, number];
  readonly conversations_findDmByTargetInboxId: (a: number, b: number, c: number) => [number, number, number];
  readonly conversations_findMessageById: (a: number, b: number, c: number) => [number, number, number];
  readonly conversations_sync: (a: number) => any;
  readonly conversations_syncAllConversations: (a: number, b: number, c: number) => any;
  readonly conversations_list: (a: number, b: number) => [number, number, number];
  readonly conversations_getHmacKeys: (a: number) => [number, number, number];
  readonly conversations_streamLocal: (a: number, b: number) => any;
  readonly conversations_stream: (a: number, b: any, c: number) => [number, number, number];
  readonly conversations_streamAllMessages: (a: number, b: any, c: number, d: number, e: number) => [number, number, number];
  readonly conversations_streamConsent: (a: number, b: any) => [number, number, number];
  readonly conversations_streamPreferences: (a: number, b: any) => [number, number, number];
  readonly __wbg_listmessagesoptions_free: (a: number, b: number) => void;
  readonly __wbg_get_listmessagesoptions_contentTypes: (a: number) => [number, number];
  readonly __wbg_set_listmessagesoptions_contentTypes: (a: number, b: number, c: number) => void;
  readonly __wbg_get_listmessagesoptions_deliveryStatus: (a: number) => number;
  readonly __wbg_set_listmessagesoptions_deliveryStatus: (a: number, b: number) => void;
  readonly __wbg_get_listmessagesoptions_direction: (a: number) => number;
  readonly __wbg_set_listmessagesoptions_direction: (a: number, b: number) => void;
  readonly __wbg_get_listmessagesoptions_kind: (a: number) => number;
  readonly __wbg_set_listmessagesoptions_kind: (a: number, b: number) => void;
  readonly listmessagesoptions_new: (a: number, b: bigint, c: number, d: bigint, e: number, f: bigint, g: number, h: number, i: number, j: number, k: number) => number;
  readonly __wbg_message_free: (a: number, b: number) => void;
  readonly __wbg_get_message_id: (a: number) => [number, number];
  readonly __wbg_set_message_id: (a: number, b: number, c: number) => void;
  readonly __wbg_get_message_convoId: (a: number) => [number, number];
  readonly __wbg_set_message_convoId: (a: number, b: number, c: number) => void;
  readonly __wbg_get_message_senderInboxId: (a: number) => [number, number];
  readonly __wbg_set_message_senderInboxId: (a: number, b: number, c: number) => void;
  readonly __wbg_get_message_content: (a: number) => number;
  readonly __wbg_set_message_content: (a: number, b: number) => void;
  readonly __wbg_get_message_kind: (a: number) => number;
  readonly __wbg_set_message_kind: (a: number, b: number) => void;
  readonly __wbg_get_message_deliveryStatus: (a: number) => number;
  readonly __wbg_set_message_deliveryStatus: (a: number, b: number) => void;
  readonly message_new: (a: number, b: number, c: bigint, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => number;
  readonly __wbg_messagewithreactions_free: (a: number, b: number) => void;
  readonly __wbg_get_messagewithreactions_message: (a: number) => number;
  readonly __wbg_set_messagewithreactions_message: (a: number, b: number) => void;
  readonly __wbg_get_messagewithreactions_reactions: (a: number) => [number, number];
  readonly __wbg_set_messagewithreactions_reactions: (a: number, b: number, c: number) => void;
  readonly __wbg_set_messagedisappearingsettings_fromNs: (a: number, b: bigint) => void;
  readonly __wbg_set_messagedisappearingsettings_inNs: (a: number, b: bigint) => void;
  readonly __wbg_set_hmackey_epoch: (a: number, b: bigint) => void;
  readonly __wbg_set_message_sentAtNs: (a: number, b: bigint) => void;
  readonly __wbg_get_listmessagesoptions_sentBeforeNs: (a: number) => [number, bigint];
  readonly __wbg_get_listmessagesoptions_sentAfterNs: (a: number) => [number, bigint];
  readonly __wbg_get_listmessagesoptions_limit: (a: number) => [number, bigint];
  readonly __wbg_get_creategroupoptions_messageDisappearingSettings: (a: number) => number;
  readonly __wbg_set_listmessagesoptions_sentBeforeNs: (a: number, b: number, c: bigint) => void;
  readonly __wbg_set_listmessagesoptions_sentAfterNs: (a: number, b: number, c: bigint) => void;
  readonly __wbg_set_listmessagesoptions_limit: (a: number, b: number, c: bigint) => void;
  readonly __wbg_get_messagedisappearingsettings_fromNs: (a: number) => bigint;
  readonly __wbg_get_messagedisappearingsettings_inNs: (a: number) => bigint;
  readonly __wbg_get_hmackey_epoch: (a: number) => bigint;
  readonly __wbg_get_message_sentAtNs: (a: number) => bigint;
  readonly __wbg_set_creategroupoptions_messageDisappearingSettings: (a: number, b: number) => void;
  readonly __wbg_permissionpolicyset_free: (a: number, b: number) => void;
  readonly __wbg_get_permissionpolicyset_addMemberPolicy: (a: number) => number;
  readonly __wbg_set_permissionpolicyset_addMemberPolicy: (a: number, b: number) => void;
  readonly __wbg_get_permissionpolicyset_removeMemberPolicy: (a: number) => number;
  readonly __wbg_set_permissionpolicyset_removeMemberPolicy: (a: number, b: number) => void;
  readonly __wbg_get_permissionpolicyset_addAdminPolicy: (a: number) => number;
  readonly __wbg_set_permissionpolicyset_addAdminPolicy: (a: number, b: number) => void;
  readonly __wbg_get_permissionpolicyset_removeAdminPolicy: (a: number) => number;
  readonly __wbg_set_permissionpolicyset_removeAdminPolicy: (a: number, b: number) => void;
  readonly __wbg_get_permissionpolicyset_updateGroupNamePolicy: (a: number) => number;
  readonly __wbg_set_permissionpolicyset_updateGroupNamePolicy: (a: number, b: number) => void;
  readonly __wbg_get_permissionpolicyset_updateGroupDescriptionPolicy: (a: number) => number;
  readonly __wbg_set_permissionpolicyset_updateGroupDescriptionPolicy: (a: number, b: number) => void;
  readonly __wbg_get_permissionpolicyset_updateGroupImageUrlSquarePolicy: (a: number) => number;
  readonly __wbg_set_permissionpolicyset_updateGroupImageUrlSquarePolicy: (a: number, b: number) => void;
  readonly __wbg_get_permissionpolicyset_updateMessageDisappearingPolicy: (a: number) => number;
  readonly __wbg_set_permissionpolicyset_updateMessageDisappearingPolicy: (a: number, b: number) => void;
  readonly permissionpolicyset_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
  readonly __wbg_grouppermissions_free: (a: number, b: number) => void;
  readonly grouppermissions_policyType: (a: number) => [number, number, number];
  readonly grouppermissions_policySet: (a: number) => [number, number, number];
  readonly __wbg_apistats_free: (a: number, b: number) => void;
  readonly __wbg_get_apistats_upload_key_package: (a: number) => bigint;
  readonly __wbg_set_apistats_upload_key_package: (a: number, b: bigint) => void;
  readonly __wbg_get_apistats_fetch_key_package: (a: number) => bigint;
  readonly __wbg_set_apistats_fetch_key_package: (a: number, b: bigint) => void;
  readonly __wbg_get_apistats_send_group_messages: (a: number) => bigint;
  readonly __wbg_set_apistats_send_group_messages: (a: number, b: bigint) => void;
  readonly __wbg_get_apistats_send_welcome_messages: (a: number) => bigint;
  readonly __wbg_set_apistats_send_welcome_messages: (a: number, b: bigint) => void;
  readonly __wbg_get_apistats_query_group_messages: (a: number) => bigint;
  readonly __wbg_set_apistats_query_group_messages: (a: number, b: bigint) => void;
  readonly __wbg_get_apistats_query_welcome_messages: (a: number) => bigint;
  readonly __wbg_set_apistats_query_welcome_messages: (a: number, b: bigint) => void;
  readonly __wbg_get_apistats_subscribe_messages: (a: number) => bigint;
  readonly __wbg_set_apistats_subscribe_messages: (a: number, b: bigint) => void;
  readonly __wbg_get_apistats_subscribe_welcomes: (a: number) => bigint;
  readonly __wbg_set_apistats_subscribe_welcomes: (a: number, b: bigint) => void;
  readonly __wbg_identitystats_free: (a: number, b: number) => void;
  readonly getInboxIdForIdentifier: (a: number, b: number, c: any) => any;
  readonly generateInboxId: (a: any) => [number, number, number, number];
  readonly __wbg_streamcloser_free: (a: number, b: number) => void;
  readonly streamcloser_end: (a: number) => void;
  readonly streamcloser_endAndWait: (a: number) => any;
  readonly streamcloser_waitForReady: (a: number) => any;
  readonly streamcloser_isClosed: (a: number) => number;
  readonly __wbg_set_identitystats_publish_identity_update: (a: number, b: bigint) => void;
  readonly __wbg_set_identitystats_get_identity_updates_v2: (a: number, b: bigint) => void;
  readonly __wbg_set_identitystats_get_inbox_ids: (a: number, b: bigint) => void;
  readonly __wbg_set_identitystats_verify_smart_contract_wallet_signature: (a: number, b: bigint) => void;
  readonly __wbg_get_identitystats_publish_identity_update: (a: number) => bigint;
  readonly __wbg_get_identitystats_get_identity_updates_v2: (a: number) => bigint;
  readonly __wbg_get_identitystats_get_inbox_ids: (a: number) => bigint;
  readonly __wbg_get_identitystats_verify_smart_contract_wallet_signature: (a: number) => bigint;
  readonly __wbg_client_free: (a: number, b: number) => void;
  readonly __wbg_logoptions_free: (a: number, b: number) => void;
  readonly __wbg_get_logoptions_structured: (a: number) => number;
  readonly __wbg_set_logoptions_structured: (a: number, b: number) => void;
  readonly __wbg_get_logoptions_performance: (a: number) => number;
  readonly __wbg_set_logoptions_performance: (a: number, b: number) => void;
  readonly __wbg_get_logoptions_level: (a: number) => number;
  readonly __wbg_set_logoptions_level: (a: number, b: number) => void;
  readonly logoptions_new: (a: number, b: number, c: number) => number;
  readonly createClient: (a: number, b: number, c: number, d: number, e: any, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number) => any;
  readonly client_accountIdentifier: (a: number) => any;
  readonly client_inboxId: (a: number) => [number, number];
  readonly client_isRegistered: (a: number) => number;
  readonly client_installationId: (a: number) => [number, number];
  readonly client_installationIdBytes: (a: number) => any;
  readonly client_appVersion: (a: number) => [number, number];
  readonly client_libxmtpVersion: (a: number) => [number, number];
  readonly client_canMessage: (a: number, b: number, c: number) => any;
  readonly client_sendSyncRequest: (a: number) => any;
  readonly client_findInboxIdByIdentifier: (a: number, b: any) => any;
  readonly client_inboxStateFromInboxIds: (a: number, b: number, c: number, d: number) => any;
  readonly client_conversations: (a: number) => number;
  readonly client_syncPreferences: (a: number) => any;
  readonly client_apiStatistics: (a: number) => number;
  readonly client_apiIdentityStatistics: (a: number) => number;
  readonly client_apiAggregateStatistics: (a: number) => [number, number];
  readonly client_clearAllStatistics: (a: number) => void;
  readonly client_uploadDebugArchive: (a: number, b: number, c: number) => any;
  readonly __wbg_consent_free: (a: number, b: number) => void;
  readonly __wbg_get_consent_entityType: (a: number) => number;
  readonly __wbg_set_consent_entityType: (a: number, b: number) => void;
  readonly __wbg_get_consent_state: (a: number) => number;
  readonly __wbg_set_consent_state: (a: number, b: number) => void;
  readonly __wbg_get_consent_entity: (a: number) => [number, number];
  readonly __wbg_set_consent_entity: (a: number, b: number, c: number) => void;
  readonly consent_new: (a: number, b: number, c: number, d: number) => number;
  readonly client_setConsentStates: (a: number, b: number, c: number) => any;
  readonly client_getConsentState: (a: number, b: number, c: number, d: number) => any;
  readonly conversation_consentState: (a: number) => [number, number, number];
  readonly conversation_updateConsentState: (a: number, b: number) => [number, number];
  readonly __wbg_remoteattachmentinfo_free: (a: number, b: number) => void;
  readonly __wbg_get_remoteattachmentinfo_contentDigest: (a: number) => [number, number];
  readonly __wbg_set_remoteattachmentinfo_contentDigest: (a: number, b: number, c: number) => void;
  readonly __wbg_get_remoteattachmentinfo_nonce: (a: number) => any;
  readonly __wbg_set_remoteattachmentinfo_nonce: (a: number, b: any) => void;
  readonly __wbg_get_remoteattachmentinfo_scheme: (a: number) => [number, number];
  readonly __wbg_set_remoteattachmentinfo_scheme: (a: number, b: number, c: number) => void;
  readonly __wbg_get_remoteattachmentinfo_url: (a: number) => [number, number];
  readonly __wbg_set_remoteattachmentinfo_url: (a: number, b: number, c: number) => void;
  readonly __wbg_get_remoteattachmentinfo_salt: (a: number) => any;
  readonly __wbg_set_remoteattachmentinfo_salt: (a: number, b: any) => void;
  readonly __wbg_get_remoteattachmentinfo_contentLength: (a: number) => number;
  readonly __wbg_set_remoteattachmentinfo_contentLength: (a: number, b: number) => void;
  readonly __wbg_get_remoteattachmentinfo_filename: (a: number) => [number, number];
  readonly __wbg_set_remoteattachmentinfo_filename: (a: number, b: number, c: number) => void;
  readonly remoteattachmentinfo_new: (a: any, b: number, c: number, d: any, e: number, f: number, g: number, h: number, i: any, j: number, k: number, l: number) => number;
  readonly __wbg_multiremoteattachment_free: (a: number, b: number) => void;
  readonly __wbg_get_multiremoteattachment_attachments: (a: number) => [number, number];
  readonly __wbg_set_multiremoteattachment_attachments: (a: number, b: number, c: number) => void;
  readonly multiremoteattachment_new: (a: number, b: number) => number;
  readonly encodeMultiRemoteAttachment: (a: number) => [number, number, number];
  readonly decodeMultiRemoteAttachment: (a: any) => [number, number, number];
  readonly __wbg_reaction_free: (a: number, b: number) => void;
  readonly __wbg_get_reaction_reference: (a: number) => [number, number];
  readonly __wbg_get_reaction_referenceInboxId: (a: number) => [number, number];
  readonly __wbg_get_reaction_action: (a: number) => number;
  readonly __wbg_set_reaction_action: (a: number, b: number) => void;
  readonly __wbg_get_reaction_content: (a: number) => [number, number];
  readonly __wbg_set_reaction_content: (a: number, b: number, c: number) => void;
  readonly __wbg_get_reaction_schema: (a: number) => number;
  readonly __wbg_set_reaction_schema: (a: number, b: number) => void;
  readonly reaction_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
  readonly encodeReaction: (a: number) => [number, number, number];
  readonly decodeReaction: (a: any) => [number, number, number];
  readonly __wbg_groupmetadata_free: (a: number, b: number) => void;
  readonly groupmetadata_creatorInboxId: (a: number) => [number, number];
  readonly groupmetadata_conversationType: (a: number) => [number, number];
  readonly __wbg_groupmember_free: (a: number, b: number) => void;
  readonly __wbg_get_groupmember_inboxId: (a: number) => [number, number];
  readonly __wbg_get_groupmember_accountIdentifiers: (a: number) => [number, number];
  readonly __wbg_set_groupmember_accountIdentifiers: (a: number, b: number, c: number) => void;
  readonly __wbg_get_groupmember_installationIds: (a: number) => [number, number];
  readonly __wbg_set_groupmember_installationIds: (a: number, b: number, c: number) => void;
  readonly __wbg_get_groupmember_permissionLevel: (a: number) => number;
  readonly __wbg_set_groupmember_permissionLevel: (a: number, b: number) => void;
  readonly __wbg_get_groupmember_consentState: (a: number) => number;
  readonly __wbg_set_groupmember_consentState: (a: number, b: number) => void;
  readonly groupmember_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
  readonly __wbg_conversation_free: (a: number, b: number) => void;
  readonly conversation_id: (a: number) => [number, number];
  readonly conversation_send: (a: number, b: number) => any;
  readonly conversation_sendOptimistic: (a: number, b: number) => [number, number, number, number];
  readonly conversation_publishMessages: (a: number) => any;
  readonly conversation_sync: (a: number) => any;
  readonly conversation_findMessages: (a: number, b: number) => any;
  readonly conversation_findMessagesWithReactions: (a: number, b: number) => any;
  readonly conversation_listMembers: (a: number) => any;
  readonly conversation_adminList: (a: number) => [number, number, number, number];
  readonly conversation_superAdminList: (a: number) => [number, number, number, number];
  readonly conversation_isAdmin: (a: number, b: number, c: number) => [number, number, number];
  readonly conversation_isSuperAdmin: (a: number, b: number, c: number) => [number, number, number];
  readonly conversation_addMembers: (a: number, b: number, c: number) => any;
  readonly conversation_addAdmin: (a: number, b: number, c: number) => any;
  readonly conversation_removeAdmin: (a: number, b: number, c: number) => any;
  readonly conversation_addSuperAdmin: (a: number, b: number, c: number) => any;
  readonly conversation_removeSuperAdmin: (a: number, b: number, c: number) => any;
  readonly conversation_groupPermissions: (a: number) => [number, number, number];
  readonly conversation_addMembersByInboxId: (a: number, b: number, c: number) => any;
  readonly conversation_removeMembers: (a: number, b: number, c: number) => any;
  readonly conversation_removeMembersByInboxId: (a: number, b: number, c: number) => any;
  readonly conversation_updateGroupName: (a: number, b: number, c: number) => any;
  readonly conversation_groupName: (a: number) => [number, number, number, number];
  readonly conversation_updateGroupImageUrlSquare: (a: number, b: number, c: number) => any;
  readonly conversation_groupImageUrlSquare: (a: number) => [number, number, number, number];
  readonly conversation_updateGroupDescription: (a: number, b: number, c: number) => any;
  readonly conversation_groupDescription: (a: number) => [number, number, number, number];
  readonly conversation_stream: (a: number, b: any) => [number, number, number];
  readonly conversation_createdAtNs: (a: number) => bigint;
  readonly conversation_isActive: (a: number) => [number, number, number];
  readonly conversation_pausedForVersion: (a: number) => [number, number, number, number];
  readonly conversation_addedByInboxId: (a: number) => [number, number, number, number];
  readonly conversation_groupMetadata: (a: number) => any;
  readonly conversation_dmPeerInboxId: (a: number) => [number, number, number, number];
  readonly conversation_updatePermissionPolicy: (a: number, b: number, c: number, d: number) => any;
  readonly conversation_updateMessageDisappearingSettings: (a: number, b: number) => any;
  readonly conversation_removeMessageDisappearingSettings: (a: number) => any;
  readonly conversation_messageDisappearingSettings: (a: number) => [number, number, number];
  readonly conversation_isMessageDisappearingEnabled: (a: number) => [number, number, number];
  readonly conversation_getHmacKeys: (a: number) => [number, number, number];
  readonly conversation_getDebugInfo: (a: number) => any;
  readonly conversation_findDuplicateDms: (a: number) => any;
  readonly __wbg_contenttypeid_free: (a: number, b: number) => void;
  readonly __wbg_get_contenttypeid_authorityId: (a: number) => [number, number];
  readonly __wbg_get_contenttypeid_typeId: (a: number) => [number, number];
  readonly __wbg_set_contenttypeid_typeId: (a: number, b: number, c: number) => void;
  readonly __wbg_get_contenttypeid_versionMajor: (a: number) => number;
  readonly __wbg_set_contenttypeid_versionMajor: (a: number, b: number) => void;
  readonly __wbg_get_contenttypeid_versionMinor: (a: number) => number;
  readonly __wbg_set_contenttypeid_versionMinor: (a: number, b: number) => void;
  readonly contenttypeid_new: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly __wbg_encodedcontent_free: (a: number, b: number) => void;
  readonly __wbg_get_encodedcontent_type: (a: number) => number;
  readonly __wbg_set_encodedcontent_type: (a: number, b: number) => void;
  readonly __wbg_get_encodedcontent_parameters: (a: number) => any;
  readonly __wbg_set_encodedcontent_parameters: (a: number, b: any) => void;
  readonly __wbg_get_encodedcontent_fallback: (a: number) => [number, number];
  readonly __wbg_set_encodedcontent_fallback: (a: number, b: number, c: number) => void;
  readonly __wbg_get_encodedcontent_compression: (a: number) => number;
  readonly __wbg_set_encodedcontent_compression: (a: number, b: number) => void;
  readonly __wbg_get_encodedcontent_content: (a: number) => any;
  readonly __wbg_set_encodedcontent_content: (a: number, b: any) => void;
  readonly encodedcontent_new: (a: number, b: any, c: number, d: number, e: number, f: any) => number;
  readonly __wbg_installation_free: (a: number, b: number) => void;
  readonly __wbg_get_installation_bytes: (a: number) => any;
  readonly __wbg_set_installation_bytes: (a: number, b: any) => void;
  readonly __wbg_get_installation_id: (a: number) => [number, number];
  readonly __wbg_set_installation_id: (a: number, b: number, c: number) => void;
  readonly __wbg_get_installation_clientTimestampNs: (a: number) => [number, bigint];
  readonly __wbg_set_installation_clientTimestampNs: (a: number, b: number, c: bigint) => void;
  readonly installation_new: (a: any, b: number, c: number, d: number, e: bigint) => number;
  readonly __wbg_inboxstate_free: (a: number, b: number) => void;
  readonly __wbg_get_inboxstate_inboxId: (a: number) => [number, number];
  readonly __wbg_get_inboxstate_recoveryIdentifier: (a: number) => any;
  readonly __wbg_set_inboxstate_recoveryIdentifier: (a: number, b: any) => void;
  readonly __wbg_get_inboxstate_installations: (a: number) => [number, number];
  readonly __wbg_set_inboxstate_installations: (a: number, b: number, c: number) => void;
  readonly __wbg_get_inboxstate_accountIdentifiers: (a: number) => [number, number];
  readonly __wbg_set_inboxstate_accountIdentifiers: (a: number, b: number, c: number) => void;
  readonly inboxstate_new: (a: number, b: number, c: any, d: number, e: number, f: number, g: number) => number;
  readonly __wbg_keypackagestatus_free: (a: number, b: number) => void;
  readonly __wbg_get_keypackagestatus_lifetime: (a: number) => number;
  readonly __wbg_set_keypackagestatus_lifetime: (a: number, b: number) => void;
  readonly __wbg_get_keypackagestatus_validationError: (a: number) => [number, number];
  readonly __wbg_set_keypackagestatus_validationError: (a: number, b: number, c: number) => void;
  readonly __wbg_lifetime_free: (a: number, b: number) => void;
  readonly __wbg_get_lifetime_not_before: (a: number) => bigint;
  readonly __wbg_set_lifetime_not_before: (a: number, b: bigint) => void;
  readonly __wbg_get_lifetime_not_after: (a: number) => bigint;
  readonly __wbg_set_lifetime_not_after: (a: number, b: bigint) => void;
  readonly inboxStateFromInboxIds: (a: number, b: number, c: number, d: number) => any;
  readonly client_inboxState: (a: number, b: number) => any;
  readonly client_getLatestInboxState: (a: number, b: number, c: number) => any;
  readonly client_getKeyPackageStatusesForInstallationIds: (a: number, b: number, c: number) => any;
  readonly __wbg_signaturerequesthandle_free: (a: number, b: number) => void;
  readonly verifySignedWithPublicKey: (a: number, b: number, c: any, d: any) => [number, number];
  readonly revokeInstallationsSignatureRequest: (a: number, b: number, c: any, d: number, e: number, f: number, g: number) => any;
  readonly applySignatureRequest: (a: number, b: number, c: number) => any;
  readonly __wbg_passkeysignature_free: (a: number, b: number) => void;
  readonly signaturerequesthandle_signatureText: (a: number) => any;
  readonly signaturerequesthandle_addEcdsaSignature: (a: number, b: any) => any;
  readonly signaturerequesthandle_addPasskeySignature: (a: number, b: number) => any;
  readonly signaturerequesthandle_addScwSignature: (a: number, b: any, c: any, d: bigint, e: number, f: bigint) => any;
  readonly client_createInboxSignatureRequest: (a: number) => [number, number, number];
  readonly client_addWalletSignatureRequest: (a: number, b: any) => any;
  readonly client_revokeWalletSignatureRequest: (a: number, b: any) => any;
  readonly client_revokeAllOtherInstallationsSignatureRequest: (a: number) => any;
  readonly client_revokeInstallationsSignatureRequest: (a: number, b: number, c: number) => any;
  readonly client_changeRecoveryIdentifierSignatureRequest: (a: number, b: any) => any;
  readonly client_applySignatureRequest: (a: number, b: number) => any;
  readonly client_registerIdentity: (a: number, b: number) => any;
  readonly client_signWithInstallationKey: (a: number, b: number, c: number) => [number, number, number];
  readonly client_verifySignedWithInstallationKey: (a: number, b: number, c: number, d: any) => [number, number];
  readonly __wbg_set_reaction_reference: (a: number, b: number, c: number) => void;
  readonly __wbg_set_groupmember_inboxId: (a: number, b: number, c: number) => void;
  readonly __wbg_set_contenttypeid_authorityId: (a: number, b: number, c: number) => void;
  readonly __wbg_set_reaction_referenceInboxId: (a: number, b: number, c: number) => void;
  readonly __wbg_set_inboxstate_inboxId: (a: number, b: number, c: number) => void;
  readonly __wbg_get_remoteattachmentinfo_secret: (a: number) => any;
  readonly __wbg_set_remoteattachmentinfo_secret: (a: number, b: any) => void;
  readonly __wbg_opfs_free: (a: number, b: number) => void;
  readonly opfs_init_sqlite_opfs: () => any;
  readonly opfs_exists: () => number;
  readonly opfs_error: () => [number, number];
  readonly opfs_wipeFiles: () => any;
  readonly opfs_rm: (a: number, b: number) => [number, number, number];
  readonly opfs_getFileNames: () => [number, number];
  readonly opfs_importDb: (a: number, b: number, c: number, d: number) => [number, number];
  readonly opfs_exportFile: (a: number, b: number) => [number, number, number, number];
  readonly opfs_getFileCount: () => number;
  readonly opfs_getCapacity: () => number;
  readonly opfs_addCapacity: (a: number) => any;
  readonly opfs_reduceCapacity: (a: number) => any;
  readonly rust_zstd_wasm_shim_qsort: (a: number, b: number, c: number, d: number) => void;
  readonly rust_zstd_wasm_shim_malloc: (a: number) => number;
  readonly rust_zstd_wasm_shim_memcmp: (a: number, b: number, c: number) => number;
  readonly rust_zstd_wasm_shim_calloc: (a: number, b: number) => number;
  readonly rust_zstd_wasm_shim_free: (a: number) => void;
  readonly rust_zstd_wasm_shim_memcpy: (a: number, b: number, c: number) => number;
  readonly rust_zstd_wasm_shim_memmove: (a: number, b: number, c: number) => number;
  readonly rust_zstd_wasm_shim_memset: (a: number, b: number, c: number) => number;
  readonly rust_sqlite_wasm_shim_localtime_js: (a: bigint, b: number) => void;
  readonly rust_sqlite_wasm_shim_tzset_js: (a: number, b: number, c: number, d: number) => void;
  readonly rust_sqlite_wasm_shim_emscripten_get_now: () => number;
  readonly rust_sqlite_wasm_shim_wasi_random_get: (a: number, b: number) => number;
  readonly rust_sqlite_wasm_shim_exit: (a: number) => void;
  readonly rust_sqlite_wasm_shim_abort_js: () => void;
  readonly rust_sqlite_wasm_shim_malloc: (a: number) => number;
  readonly rust_sqlite_wasm_shim_free: (a: number) => void;
  readonly rust_sqlite_wasm_shim_realloc: (a: number, b: number) => number;
  readonly rust_sqlite_wasm_shim_calloc: (a: number, b: number) => number;
  readonly sqlite3_os_init: () => number;
  readonly __wbg_intounderlyingbytesource_free: (a: number, b: number) => void;
  readonly intounderlyingbytesource_type: (a: number) => number;
  readonly intounderlyingbytesource_autoAllocateChunkSize: (a: number) => number;
  readonly intounderlyingbytesource_start: (a: number, b: any) => void;
  readonly intounderlyingbytesource_pull: (a: number, b: any) => any;
  readonly intounderlyingbytesource_cancel: (a: number) => void;
  readonly __wbg_intounderlyingsource_free: (a: number, b: number) => void;
  readonly intounderlyingsource_pull: (a: number, b: any) => any;
  readonly intounderlyingsource_cancel: (a: number) => void;
  readonly __wbg_intounderlyingsink_free: (a: number, b: number) => void;
  readonly intounderlyingsink_write: (a: number, b: any) => any;
  readonly intounderlyingsink_close: (a: number) => any;
  readonly intounderlyingsink_abort: (a: number, b: any) => any;
  readonly task_worker_entry_point: (a: number) => [number, number];
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_exn_store: (a: number) => void;
  readonly __externref_table_alloc: () => number;
  readonly __wbindgen_export_4: WebAssembly.Table;
  readonly __wbindgen_free: (a: number, b: number, c: number) => void;
  readonly __externref_drop_slice: (a: number, b: number) => void;
  readonly __wbindgen_export_7: WebAssembly.Table;
  readonly __externref_table_dealloc: (a: number) => void;
  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hc6b9ddcbfcc08eea: (a: number, b: number) => void;
  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hd0e40dce3ea5bca1: (a: number, b: number) => void;
  readonly closure5204_externref_shim: (a: number, b: number, c: any) => void;
  readonly closure6131_externref_shim: (a: number, b: number, c: any, d: any) => void;
  readonly __wbindgen_start: () => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {{ module: SyncInitInput }} module - Passing `SyncInitInput` directly is deprecated.
*
* @returns {InitOutput}
*/
export function initSync(module: { module: SyncInitInput } | SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {{ module_or_path: InitInput | Promise<InitInput> }} module_or_path - Passing `InitInput` directly is deprecated.
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path?: { module_or_path: InitInput | Promise<InitInput> } | InitInput | Promise<InitInput>): Promise<InitOutput>;
