import e,{inboxStateFromInboxIds as t,applySignatureRequest as i,revokeInstallationsSignatureRequest as s,generateInboxId as n,getInboxIdForIdentifier as a}from"@xmtp/wasm-bindings";import"@xmtp/content-type-primitives";const r={local:"http://localhost:5555",dev:"https://dev.xmtp.network",production:"https://production.xmtp.network"},o=e=>({bytes:e.bytes,clientTimestampNs:e.clientTimestampNs,id:e.id}),d=new Map,c=e=>{self.postMessage(e)};let l=!1;self.onmessage=async u=>{const{action:g,id:I,data:b}=u.data;l&&console.log("utils worker received event data",u.data),await e();try{switch(g){case"utils.init":l=b.enableLogging,c({id:I,action:g,result:void 0});break;case"utils.generateInboxId":{const e=n(b.identifier);c({id:I,action:g,result:e});break}case"utils.getInboxIdForIdentifier":{const e=await(async(e,t)=>a(t?r[t]:r.dev,e))(b.identifier,b.env);c({id:I,action:g,result:e});break}case"utils.revokeInstallationsSignatureText":{const e=r[b.env??"dev"],t=await s(e,b.identifier,b.inboxId,b.installationIds),i=await t.signatureText();d.set(b.signatureRequestId,t);const n={signatureText:i,signatureRequestId:b.signatureRequestId};c({id:I,action:g,result:n});break}case"utils.revokeInstallations":{const e=r[b.env??"dev"],t=d.get(b.signatureRequestId);if(!t)throw new Error("Signature request not found");switch(b.signer.type){case"EOA":await t.addEcdsaSignature(b.signer.signature);break;case"SCW":await t.addScwSignature(b.signer.identifier,b.signer.signature,b.signer.chainId,b.signer.blockNumber)}await i(e,t),d.delete(b.signatureRequestId),c({id:I,action:g,result:void 0});break}case"utils.inboxStateFromInboxIds":{const e=r[b.env??"dev"];try{const i=(await t(e,b.inboxIds)).map(e=>(e=>({identifiers:e.accountIdentifiers,inboxId:e.inboxId,installations:e.installations.map(o),recoveryIdentifier:e.recoveryIdentifier}))(e));c({id:I,action:g,result:i})}catch(e){console.error("utils received error",e)}break}}}catch(e){(e=>{self.postMessage(e)})({id:I,action:g,error:e})}};
//# sourceMappingURL=utils.js.map
